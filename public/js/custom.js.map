{"version":3,"sources":["custom.js"],"names":[],"mappingsfile":"custom.js","sourcesContent":["function getTokenValue() {\n    return document.querySelector('#csrf-token').getAttribute('content');\n}\n\n$(window).on('load', function() { // makes sure the whole site is loaded\n\t$('#status').fadeOut(); // will first fade out the loading animation\n\t$('#preloader').delay(0).fadeOut('fast'); // will fade out the white DIV that covers the website.\n\t$('body').delay(0).css({'overflow':'visible'});\n})\n\n$('#add-image').on('click', function (e) {\n  e.preventDefault();\n  $('div#form-body-image').append(\"<hr><div class='form-group'><label>Name Photo</label><input type='text' name='name[]' required class='form-control'/><label>Image</label><input type='file' name='image[]' required class='form-control'/></div>\");\n});\n\n// START JS TYPEHEAD\n/*!\n * jQuery Typeahead\n * Copyright (C) 2017 RunningCoder.org\n * Licensed under the MIT license\n *\n * @author Tom Bertrand\n * @version 2.10.4 (2017-10-17)\n * @link http://www.runningcoder.org/jquerytypeahead/\n */\n(function (factory) {\n    if (typeof define === \"function\" && define.amd) {\n        define(\"jquery-typeahead\", [\"jquery\"], function (jQuery) {\n            return factory(jQuery);\n        });\n    } else if (typeof module === \"object\" && module.exports) {\n        module.exports = (function (jQuery, root) {\n            if (jQuery === undefined) {\n                if (typeof window !== \"undefined\") {\n                    jQuery = require(\"jquery\");\n                } else {\n                    jQuery = require(\"jquery\")(root);\n                }\n            }\n            return factory(jQuery);\n        })();\n    } else {\n        factory(jQuery);\n    }\n})(function ($) {\n    \"use strict\";\n\n    window.Typeahead = {\n        version: '2.10.4'\n    };\n\n    /**\n     * @private\n     * Default options\n     * @link http://www.runningcoder.org/jquerytypeahead/documentation/\n     */\n    var _options = {\n        input: null,                // *RECOMMENDED*, jQuery selector to reach Typeahead's input for initialization\n        minLength: 2,               // Accepts 0 to search on focus, minimum character length to perform a search\n        maxLength: false,           // False as \"Infinity\" will not put character length restriction for searching results\n        maxItem: 8,                 // Accepts 0 / false as \"Infinity\" meaning all the results will be displayed\n        dynamic: false,             // When true, Typeahead will get a new dataset from the source option on every key press\n        delay: 300,                 // delay in ms when dynamic option is set to true\n        order: null,                // \"asc\" or \"desc\" to sort results\n        offset: false,              // Set to true to match items starting from their first character\n        hint: false,                // Added support for excessive \"space\" characters\n        accent: false,              // Will allow to type accent and give letter equivalent results, also can define a custom replacement object\n        highlight: true,            // Added \"any\" to highlight any word in the template, by default true will only highlight display keys\n        multiselect: null,          // Multiselect configuration object, see documentation for all options\n        group: false,               // Improved feature, Boolean,string,object(key, template (string, function))\n        groupOrder: null,           // New feature, order groups \"asc\", \"desc\", Array, Function\n        maxItemPerGroup: null,      // Maximum number of result per Group\n        dropdownFilter: false,      // Take group options string and create a dropdown filter\n        dynamicFilter: null,        // Filter the typeahead results based on dynamic value, Ex: Players based on TeamID\n        backdrop: false,            // Add a backdrop behind Typeahead results\n        backdropOnFocus: false,     // Display the backdrop option as the Typeahead input is :focused\n        cache: false,               // Improved option, true OR 'localStorage' OR 'sessionStorage'\n        ttl: 3600000,               // Cache time to live in ms\n        compression: false,         // Requires LZString library\n        searchOnFocus: false,       // Display search results on input focus\n        blurOnTab: true,            // Blur Typeahead when Tab key is pressed, if false Tab will go though search results\n        resultContainer: null,      // List the results inside any container string or jQuery object\n        generateOnLoad: null,       // Forces the source to be generated on page load even if the input is not focused!\n        mustSelectItem: false,      // The submit function only gets called if an item is selected\n        href: null,                 // String or Function to format the url for right-click & open in new tab on link results\n        display: [\"display\"],       // Allows search in multiple item keys [\"display1\", \"display2\"]\n        template: null,             // Display template of each of the result list\n        templateValue: null,        // Set the input value template when an item is clicked\n        groupTemplate: null,        // Set a custom template for the groups\n        correlativeTemplate: false, // Compile display keys, enables multiple key search from the template string\n        emptyTemplate: false,       // Display an empty template if no result\n        cancelButton: true,         // If text is detected in the input, a cancel button will be available to reset the input (pressing ESC also cancels)\n        loadingAnimation: true,     // Display a loading animation when typeahead is doing request / searching for results\n        filter: true,               // Set to false or function to bypass Typeahead filtering. WARNING: accent, correlativeTemplate, offset & matcher will not be interpreted\n        matcher: null,              // Add an extra filtering function after the typeahead functions\n        source: null,               // Source of data for Typeahead to filter\n        callback: {\n            onInit: null,               // When Typeahead is first initialized (happens only once)\n            onReady: null,              // When the Typeahead initial preparation is completed\n            onShowLayout: null,         // Called when the layout is shown\n            onHideLayout: null,         // Called when the layout is hidden\n            onSearch: null,             // When data is being fetched & analyzed to give search results\n            onResult: null,             // When the result container is displayed\n            onLayoutBuiltBefore: null,  // When the result HTML is build, modify it before it get showed\n            onLayoutBuiltAfter: null,   // Modify the dom right after the results gets inserted in the result container\n            onNavigateBefore: null,     // When a key is pressed to navigate the results, before the navigation happens\n            onNavigateAfter: null,      // When a key is pressed to navigate the results\n            onEnter: null,              // When an item in the result list is focused\n            onLeave: null,              // When an item in the result list is blurred\n            onClickBefore: null,        // Possibility to e.preventDefault() to prevent the Typeahead behaviors\n            onClickAfter: null,         // Happens after the default clicked behaviors has been executed\n            onDropdownFilter: null,     // When the dropdownFilter is changed, trigger this callback\n            onSendRequest: null,        // Gets called when the Ajax request(s) are sent\n            onReceiveRequest: null,     // Gets called when the Ajax request(s) are all received\n            onPopulateSource: null,     // Perform operation on the source data before it gets in Typeahead data\n            onCacheSave: null,          // Perform operation on the source data before it gets in Typeahead cache\n            onSubmit: null,             // When Typeahead form is submitted\n            onCancel: null              // Triggered if the typeahead had text inside and is cleared\n        },\n        selector: {\n            container: \"typeahead__container\",\n            result: \"typeahead__result\",\n            list: \"typeahead__list\",\n            group: \"typeahead__group\",\n            item: \"typeahead__item\",\n            empty: \"typeahead__empty\",\n            display: \"typeahead__display\",\n            query: \"typeahead__query\",\n            filter: \"typeahead__filter\",\n            filterButton: \"typeahead__filter-button\",\n            dropdown: \"typeahead__dropdown\",\n            dropdownItem: \"typeahead__dropdown-item\",\n            labelContainer: \"typeahead__label-container\",\n            label: \"typeahead__label\",\n            button: \"typeahead__button\",\n            backdrop: \"typeahead__backdrop\",\n            hint: \"typeahead__hint\",\n            cancelButton: \"typeahead__cancel-button\"\n        },\n        debug: false // Display debug information (RECOMMENDED for dev environment)\n    };\n\n    /**\n     * @private\n     * Event namespace\n     */\n    var _namespace = \".typeahead\";\n\n    /**\n     * @private\n     * Accent equivalents\n     */\n    var _accent = {\n        from: \"ãàáäâẽèéëêìíïîõòóöôùúüûñç\",\n        to: \"aaaaaeeeeeiiiiooooouuuunc\"\n    };\n\n    /**\n     * #62 IE9 doesn't trigger \"input\" event when text gets removed (backspace, ctrl+x, etc)\n     * @private\n     */\n    var _isIE9 = ~window.navigator.appVersion.indexOf(\"MSIE 9.\");\n\n    /**\n     * #193 Clicking on a suggested option does not select it on IE10/11\n     * @private\n     */\n    var _isIE10 = ~window.navigator.appVersion.indexOf(\"MSIE 10\");\n    var _isIE11 = ~window.navigator.userAgent.indexOf(\"Trident\")\n        ? ~window.navigator.userAgent.indexOf(\"rv:11\")\n        : false;\n\n    // SOURCE GROUP RESERVED WORDS: ajax, data, url\n    // SOURCE ITEMS RESERVED KEYS: group, display, data, matchedKey, compiled, href\n\n    /**\n     * @constructor\n     * Typeahead Class\n     *\n     * @param {object} node jQuery input object\n     * @param {object} options User defined options\n     */\n    var Typeahead = function (node, options) {\n        this.rawQuery = node.val() || \"\";   // Unmodified input query\n        this.query = node.val() || \"\";      // Input query\n        this.selector = node[0].selector;   // Typeahead instance selector (to reach from window.Typeahead[SELECTOR])\n        this.deferred = null;               // Promise when \"input\" event in triggered, this.node.triggerHandler('input').then(() => {})\n        this.tmpSource = {};                // Temp var to preserve the source order for the searchResult function\n        this.source = {};                   // The generated source kept in memory\n        this.dynamicGroups = [];            // Store the source groups that are defined as dynamic\n        this.hasDynamicGroups = false;      // Boolean if at least one of the groups has a dynamic source\n        this.generatedGroupCount = 0;       // Number of groups generated, if limit reached the search can be done\n        this.groupBy = \"group\";             // This option will change according to filtering or custom grouping\n        this.groups = [];                   // Array of all the available groups, used to build the groupTemplate\n        this.searchGroups = [];             // Array of groups to generate when Typeahead searches data\n        this.generateGroups = [];           // Array of groups to generate when Typeahead requests data\n        this.requestGroups = [];            // Array of groups to request via Ajax\n        this.result = [];                   // Results based on Source-query match (only contains the displayed elements)\n        this.tmpResult = {};                // Temporary object of results, before they get passed to the buildLayout function\n        this.groupTemplate = \"\";            // Result template at the {{group}} level\n        this.resultHtml = null;             // HTML Results (displayed elements)\n        this.resultCount = 0;               // Total results based on Source-query match\n        this.resultCountPerGroup = {};      // Total results based on Source-query match per group\n        this.options = options;             // Typeahead options (Merged default & user defined)\n        this.node = node;                   // jQuery object of the Typeahead <input>\n        this.namespace =\n            \".\" +\n            this.helper.slugify.call(this, this.selector) +\n            _namespace;                     // Every Typeahead instance gets its own namespace for events\n        this.isContentEditable = typeof this.node.attr('contenteditable') !== \"undefined\"\n            && this.node.attr('contenteditable') !== \"false\";\n        this.container = null;              // Typeahead container, usually right after <form>\n        this.resultContainer = null;        // Typeahead result container (html)\n        this.item = null;                   // Selected item\n        this.items = null;                  // Multiselect selected items\n        this.comparedItems = null;          // Multiselect items stored for comparison\n        this.xhr = {};                      // Ajax request(s) stack\n        this.hintIndex = null;              // Numeric value of the hint index in the result list\n        this.filters = {                    // Filter list for searching, dropdown and dynamic(s)\n            dropdown: {},                   // Dropdown menu if options.dropdownFilter is set\n            dynamic: {}                     // Checkbox / Radio / Select to filter the source data\n        };\n        this.dropdownFilter = {\n            static: [],                     // Objects that has a value\n            dynamic: []\n        };\n        this.dropdownFilterAll = null;      // The last \"all\" definition\n        this.isDropdownEvent = false;       // If a dropdownFilter is clicked, this will be true to trigger the callback\n\n        this.requests = {};                 // Store the group:request instead of generating them every time\n\n        this.backdrop = {};                 // The backdrop object\n        this.hint = {};                     // The hint object\n        this.label = {};                    // The label object\n        this.hasDragged = false;            // Will cancel mouseend events if true\n        this.focusOnly = false;             // Focus the input preventing any operations\n\n        this.__construct();\n    };\n\n    Typeahead.prototype = {\n        _validateCacheMethod: function (cache) {\n            var supportedCache = [\"localStorage\", \"sessionStorage\"],\n                supported;\n\n            if (cache === true) {\n                cache = \"localStorage\";\n            } else if (typeof cache === \"string\" && !~supportedCache.indexOf(cache)) {\n                // {debug}\n                if (this.options.debug) {\n                    _debug.log({\n                        node: this.selector,\n                        function: \"extendOptions()\",\n                        message: 'Invalid options.cache, possible options are \"localStorage\" or \"sessionStorage\"'\n                    });\n\n                    _debug.print();\n                }\n                // {/debug}\n                return false;\n            }\n\n            supported = typeof window[cache] !== \"undefined\";\n\n            try {\n                window[cache].setItem(\"typeahead\", \"typeahead\");\n                window[cache].removeItem(\"typeahead\");\n            } catch (e) {\n                supported = false;\n            }\n\n            return (supported && cache) || false;\n        },\n\n        extendOptions: function () {\n            this.options.cache = this._validateCacheMethod(this.options.cache);\n\n            if (this.options.compression) {\n                if (typeof LZString !== \"object\" || !this.options.cache) {\n                    // {debug}\n                    if (this.options.debug) {\n                        _debug.log({\n                            node: this.selector,\n                            function: \"extendOptions()\",\n                            message: \"Missing LZString Library or options.cache, no compression will occur.\"\n                        });\n\n                        _debug.print();\n                    }\n                    // {/debug}\n                    this.options.compression = false;\n                }\n            }\n\n            if (!this.options.maxLength || isNaN(this.options.maxLength)) {\n                this.options.maxLength = Infinity;\n            }\n\n            if (\n                typeof this.options.maxItem !== \"undefined\" && ~[0, false].indexOf(this.options.maxItem)\n            ) {\n                this.options.maxItem = Infinity;\n            }\n\n            if (\n                this.options.maxItemPerGroup && !/^\\d+$/.test(this.options.maxItemPerGroup)\n            ) {\n                this.options.maxItemPerGroup = null;\n            }\n\n            if (this.options.display && !Array.isArray(this.options.display)) {\n                this.options.display = [this.options.display];\n            }\n\n            if (this.options.multiselect) {\n                this.items = [];\n                this.comparedItems = [];\n                if (typeof this.options.multiselect.matchOn === \"string\") {\n                    this.options.multiselect.matchOn = [this.options.multiselect.matchOn];\n                }\n            }\n\n            if (this.options.group) {\n                if (!Array.isArray(this.options.group)) {\n                    if (typeof this.options.group === \"string\") {\n                        this.options.group = {\n                            key: this.options.group\n                        };\n                    } else if (typeof this.options.group === \"boolean\") {\n                        this.options.group = {\n                            key: \"group\"\n                        };\n                    }\n\n                    this.options.group.key = this.options.group.key || \"group\";\n                } else {\n                    // {debug}\n                    if (this.options.debug) {\n                        _debug.log({\n                            node: this.selector,\n                            function: \"extendOptions()\",\n                            message: \"options.group must be a boolean|string|object as of 2.5.0\"\n                        });\n\n                        _debug.print();\n                    }\n                    // {/debug}\n                }\n            }\n\n            if (this.options.highlight && !~[\"any\", true].indexOf(this.options.highlight)) {\n                this.options.highlight = false;\n            }\n\n            if (\n                this.options.dropdownFilter &&\n                this.options.dropdownFilter instanceof Object\n            ) {\n                if (!Array.isArray(this.options.dropdownFilter)) {\n                    this.options.dropdownFilter = [this.options.dropdownFilter];\n                }\n                for (var i = 0, ii = this.options.dropdownFilter.length; i < ii; ++i) {\n                    this.dropdownFilter[\n                        this.options.dropdownFilter[i].value ? \"static\" : \"dynamic\"\n                        ].push(this.options.dropdownFilter[i]);\n                }\n            }\n\n            if (this.options.dynamicFilter && !Array.isArray(this.options.dynamicFilter)) {\n                this.options.dynamicFilter = [this.options.dynamicFilter];\n            }\n\n            if (this.options.accent) {\n                if (typeof this.options.accent === \"object\") {\n                    if (\n                        this.options.accent.from &&\n                        this.options.accent.to &&\n                        this.options.accent.from.length !== this.options.accent.to.length\n                    ) {\n                        // {debug}\n                        if (this.options.debug) {\n                            _debug.log({\n                                node: this.selector,\n                                function: \"extendOptions()\",\n                                message: 'Invalid \"options.accent\", from and to must be defined and same length.'\n                            });\n\n                            _debug.print();\n                        }\n                        // {/debug}\n                    }\n\n                } else {\n                    this.options.accent = _accent;\n                }\n            }\n\n            if (this.options.groupTemplate) {\n                this.groupTemplate = this.options.groupTemplate;\n            }\n\n            if (this.options.resultContainer) {\n                if (typeof this.options.resultContainer === \"string\") {\n                    this.options.resultContainer = $(this.options.resultContainer);\n                }\n\n                if (\n                    !(this.options.resultContainer instanceof $) || !this.options.resultContainer[0]\n                ) {\n                    // {debug}\n                    if (this.options.debug) {\n                        _debug.log({\n                            node: this.selector,\n                            function: \"extendOptions()\",\n                            message: 'Invalid jQuery selector or jQuery Object for \"options.resultContainer\".'\n                        });\n\n                        _debug.print();\n                    }\n                    // {/debug}\n                } else {\n                    this.resultContainer = this.options.resultContainer;\n                }\n            }\n\n            if (\n                this.options.maxItemPerGroup &&\n                this.options.group &&\n                this.options.group.key\n            ) {\n                this.groupBy = this.options.group.key;\n            }\n\n            // Compatibility onClick callback\n            if (this.options.callback && this.options.callback.onClick) {\n                this.options.callback.onClickBefore = this.options.callback.onClick;\n                delete this.options.callback.onClick;\n            }\n\n            // Compatibility onNavigate callback\n            if (this.options.callback && this.options.callback.onNavigate) {\n                this.options.callback.onNavigateBefore = this.options.callback.onNavigate;\n                delete this.options.callback.onNavigate;\n            }\n\n            this.options = $.extend(true, {}, _options, this.options);\n        },\n\n        unifySourceFormat: function () {\n            this.dynamicGroups = [];\n\n            // source: ['item1', 'item2', 'item3']\n            if (Array.isArray(this.options.source)) {\n                this.options.source = {\n                    group: {\n                        data: this.options.source\n                    }\n                };\n            }\n\n            // source: \"http://www.test.com/url.json\"\n            if (typeof this.options.source === \"string\") {\n                this.options.source = {\n                    group: {\n                        ajax: {\n                            url: this.options.source\n                        }\n                    }\n                };\n            }\n\n            if (this.options.source.ajax) {\n                this.options.source = {\n                    group: {\n                        ajax: this.options.source.ajax\n                    }\n                };\n            }\n\n            // source: {data: ['item1', 'item2'], url: \"http://www.test.com/url.json\"}\n            if (this.options.source.url || this.options.source.data) {\n                this.options.source = {\n                    group: this.options.source\n                };\n            }\n\n            var group, groupSource, tmpAjax;\n\n            for (group in this.options.source) {\n                if (!this.options.source.hasOwnProperty(group)) continue;\n\n                groupSource = this.options.source[group];\n\n                // source: {group: \"http://www.test.com/url.json\"}\n                if (typeof groupSource === \"string\") {\n                    groupSource = {\n                        ajax: {\n                            url: groupSource\n                        }\n                    };\n                }\n\n                // source: {group: {url: [\"http://www.test.com/url.json\", \"json.path\"]}}\n                tmpAjax = groupSource.url || groupSource.ajax;\n                if (Array.isArray(tmpAjax)) {\n                    groupSource.ajax =\n                        typeof tmpAjax[0] === \"string\"\n                            ? {\n                                url: tmpAjax[0]\n                            }\n                            : tmpAjax[0];\n                    groupSource.ajax.path = groupSource.ajax.path || tmpAjax[1] || null;\n                    delete groupSource.url;\n                } else {\n                    // source: {group: {url: {url: \"http://www.test.com/url.json\", method: \"GET\"}}}\n                    // source: {group: {url: \"http://www.test.com/url.json\", dataType: \"jsonp\"}}\n                    if (typeof groupSource.url === \"object\") {\n                        groupSource.ajax = groupSource.url;\n                    } else if (typeof groupSource.url === \"string\") {\n                        groupSource.ajax = {\n                            url: groupSource.url\n                        };\n                    }\n                    delete groupSource.url;\n                }\n\n                if (!groupSource.data && !groupSource.ajax) {\n                    // {debug}\n                    if (this.options.debug) {\n                        _debug.log({\n                            node: this.selector,\n                            function: \"unifySourceFormat()\",\n                            arguments: JSON.stringify(this.options.source),\n                            message: 'Undefined \"options.source.' +\n                            group +\n                            '.[data|ajax]\" is Missing - Typeahead dropped'\n                        });\n\n                        _debug.print();\n                    }\n                    // {/debug}\n\n                    return false;\n                }\n\n                if (groupSource.display && !Array.isArray(groupSource.display)) {\n                    groupSource.display = [groupSource.display];\n                }\n\n                groupSource.minLength =\n                    typeof groupSource.minLength === \"number\"\n                        ? groupSource.minLength\n                        : this.options.minLength;\n                groupSource.maxLength =\n                    typeof groupSource.maxLength === \"number\"\n                        ? groupSource.maxLength\n                        : this.options.maxLength;\n                groupSource.dynamic =\n                    typeof groupSource.dynamic === \"boolean\" || this.options.dynamic;\n\n                if (groupSource.minLength > groupSource.maxLength) {\n                    groupSource.minLength = groupSource.maxLength;\n                }\n                this.options.source[group] = groupSource;\n\n                if (this.options.source[group].dynamic) {\n                    this.dynamicGroups.push(group);\n                }\n\n                groupSource.cache =\n                    typeof groupSource.cache !== \"undefined\"\n                        ? this._validateCacheMethod(groupSource.cache)\n                        : this.options.cache;\n\n                if (groupSource.compression) {\n                    if (typeof LZString !== \"object\" || !groupSource.cache) {\n                        // {debug}\n                        if (this.options.debug) {\n                            _debug.log({\n                                node: this.selector,\n                                function: \"unifySourceFormat()\",\n                                message: \"Missing LZString Library or group.cache, no compression will occur on group: \" +\n                                group\n                            });\n\n                            _debug.print();\n                        }\n                        // {/debug}\n                        groupSource.compression = false;\n                    }\n                }\n            }\n\n            this.hasDynamicGroups =\n                this.options.dynamic || !!this.dynamicGroups.length;\n\n            return true;\n        },\n\n        init: function () {\n            this.helper.executeCallback.call(this, this.options.callback.onInit, [\n                this.node\n            ]);\n\n            this.container = this.node.closest(\".\" + this.options.selector.container);\n\n            // {debug}\n            if (this.options.debug) {\n                _debug.log({\n                    node: this.selector,\n                    function: \"init()\",\n                    //'arguments': JSON.stringify(this.options),\n                    message: \"OK - Typeahead activated on \" + this.selector\n                });\n\n                _debug.print();\n            }\n            // {/debug}\n        },\n\n        delegateEvents: function () {\n            var scope = this,\n                events = [\n                    \"focus\" + this.namespace,\n                    \"input\" + this.namespace,\n                    \"propertychange\" + this.namespace, // IE8 Fix\n                    \"keydown\" + this.namespace,\n                    \"keyup\" + this.namespace, // IE9 Fix\n                    \"search\" + this.namespace,\n                    \"generate\" + this.namespace\n                ];\n\n            // #149 - Adding support for Mobiles\n            $(\"html\")\n                .on(\"touchmove\", function () {\n                    scope.hasDragged = true;\n                })\n                .on(\"touchstart\", function () {\n                    scope.hasDragged = false;\n                });\n\n            this.node\n                .closest(\"form\")\n                .on(\"submit\", function (e) {\n                    if (\n                        scope.options.mustSelectItem &&\n                        scope.helper.isEmpty(scope.item)\n                    ) {\n                        e.preventDefault();\n                        return;\n                    }\n\n                    if (!scope.options.backdropOnFocus) {\n                        scope.hideLayout();\n                    }\n\n                    if (scope.options.callback.onSubmit) {\n                        return scope.helper.executeCallback.call(\n                            scope,\n                            scope.options.callback.onSubmit,\n                            [scope.node, this, scope.item || scope.items, e]\n                        );\n                    }\n                })\n                .on(\"reset\", function () {\n                    // #221 - Reset Typeahead on form reset.\n                    // setTimeout to re-queue the `input.typeahead` event at the end\n                    setTimeout(function () {\n                        scope.node.trigger(\"input\" + scope.namespace);\n                        // #243 - minLength: 0 opens the Typeahead results\n                        scope.hideLayout();\n                    });\n                });\n\n            // IE8 fix\n            var preventNextEvent = false;\n\n            // IE10/11 fix\n            if (this.node.attr(\"placeholder\") && (_isIE10 || _isIE11)) {\n                var preventInputEvent = true;\n\n                this.node.on(\"focusin focusout\", function () {\n                    preventInputEvent = !!(!this.value && this.placeholder);\n                });\n\n                this.node.on(\"input\", function (e) {\n                    if (preventInputEvent) {\n                        e.stopImmediatePropagation();\n                        preventInputEvent = false;\n                    }\n                });\n            }\n\n            this.node\n                .off(this.namespace)\n                .on(events.join(\" \"), function (e, data) {\n                    switch (e.type) {\n                        case \"generate\":\n                            scope.generateSource(Object.keys(scope.options.source));\n                            break;\n                        case \"focus\":\n                            if (scope.focusOnly) {\n                                scope.focusOnly = false;\n                                break;\n                            }\n                            if (scope.options.backdropOnFocus) {\n                                scope.buildBackdropLayout();\n                                scope.showLayout();\n                            }\n                            if (scope.options.searchOnFocus && !scope.item) {\n                                scope.deferred = $.Deferred();\n                                scope.assignQuery();\n                                scope.generateSource();\n                            }\n                            break;\n                        case \"keydown\":\n                            if (e.keyCode === 8\n                                && scope.options.multiselect\n                                && scope.options.multiselect.cancelOnBackspace\n                                && scope.query === ''\n                                && scope.items.length\n                            ) {\n                                scope.cancelMultiselectItem(scope.items.length - 1, null, e);\n                            } else if (e.keyCode && ~[9, 13, 27, 38, 39, 40].indexOf(e.keyCode)) {\n                                preventNextEvent = true;\n                                scope.navigate(e);\n                            }\n                            break;\n                        case \"keyup\":\n                            if (\n                                _isIE9 &&\n                                scope.node[0].value.replace(/^\\s+/, \"\").toString().length <\n                                scope.query.length\n                            ) {\n                                scope.node.trigger(\"input\" + scope.namespace);\n                            }\n                            break;\n                        case \"propertychange\":\n                            if (preventNextEvent) {\n                                preventNextEvent = false;\n                                break;\n                            }\n                        case \"input\":\n                            scope.deferred = $.Deferred();\n                            scope.assignQuery();\n\n                            // #195 Trigger an onCancel event if the Typeahead is cleared\n                            if (scope.rawQuery === \"\" && scope.query === \"\") {\n                                e.originalEvent = data || {};\n                                scope.helper.executeCallback.call(\n                                    scope,\n                                    scope.options.callback.onCancel,\n                                    [scope.node, e]\n                                );\n                            }\n\n                            scope.options.cancelButton &&\n                            scope.toggleCancelButtonVisibility();\n\n                            if (\n                                scope.options.hint &&\n                                scope.hint.container &&\n                                scope.hint.container.val() !== \"\"\n                            ) {\n                                if (scope.hint.container.val().indexOf(scope.rawQuery) !== 0) {\n                                    scope.hint.container.val(\"\");\n                                    if (scope.isContentEditable) {\n                                        scope.hint.container.text(\"\");\n                                    }\n                                }\n                            }\n\n                            if (scope.hasDynamicGroups) {\n                                scope.helper.typeWatch(function () {\n                                    scope.generateSource();\n                                }, scope.options.delay);\n                            } else {\n                                scope.generateSource();\n                            }\n                            break;\n                        case \"search\":\n                            scope.searchResult();\n                            scope.buildLayout();\n\n                            if (scope.result.length ||\n                                (scope.searchGroups.length &&\n                                    scope.options.emptyTemplate &&\n                                    scope.query.length)\n                            ) {\n                                scope.showLayout();\n                            } else {\n                                scope.hideLayout();\n                            }\n\n                            scope.deferred && scope.deferred.resolve();\n                            break;\n                    }\n\n                    return scope.deferred && scope.deferred.promise();\n                });\n\n            if (this.options.generateOnLoad) {\n                this.node.trigger(\"generate\" + this.namespace);\n            }\n        },\n\n        assignQuery: function () {\n            if (this.isContentEditable) {\n                this.rawQuery = this.node.text();\n            } else {\n                this.rawQuery = this.node.val().toString();\n            }\n            this.rawQuery = this.rawQuery.replace(/^\\s+/, \"\");\n\n            if (this.rawQuery !== this.query) {\n                this.item = null;\n                this.query = this.rawQuery;\n            }\n        },\n\n        filterGenerateSource: function () {\n            this.searchGroups = [];\n            this.generateGroups = [];\n\n            if (this.focusOnly && !this.options.multiselect) return;\n\n            for (var group in this.options.source) {\n                if (!this.options.source.hasOwnProperty(group)) continue;\n                if (\n                    this.query.length >= this.options.source[group].minLength &&\n                    this.query.length <= this.options.source[group].maxLength\n                ) {\n                    this.searchGroups.push(group);\n                    if (!this.options.source[group].dynamic && this.source[group]) {\n                        continue;\n                    }\n                    this.generateGroups.push(group);\n                }\n            }\n        },\n\n        generateSource: function (generateGroups) {\n            this.filterGenerateSource();\n            if (Array.isArray(generateGroups) && generateGroups.length) {\n                this.generateGroups = generateGroups;\n            } else if (!this.generateGroups.length) {\n                this.node.trigger(\"search\" + this.namespace);\n                return;\n            }\n\n            this.requestGroups = [];\n            this.generatedGroupCount = 0;\n            this.options.loadingAnimation && this.container.addClass(\"loading\");\n\n            if (!this.helper.isEmpty(this.xhr)) {\n                for (var i in this.xhr) {\n                    if (!this.xhr.hasOwnProperty(i)) continue;\n                    this.xhr[i].abort();\n                }\n                this.xhr = {};\n            }\n\n            var scope = this,\n                group,\n                groupData,\n                groupSource,\n                cache,\n                compression,\n                dataInStorage,\n                isValidStorage;\n\n            for (var i = 0, ii = this.generateGroups.length; i < ii; ++i) {\n                group = this.generateGroups[i];\n                groupSource = this.options.source[group];\n                cache = groupSource.cache;\n                compression = groupSource.compression;\n\n                if (cache) {\n                    dataInStorage = window[cache].getItem(\n                        \"TYPEAHEAD_\" + this.selector + \":\" + group\n                    );\n                    if (dataInStorage) {\n                        if (compression) {\n                            dataInStorage = LZString.decompressFromUTF16(dataInStorage);\n                        }\n\n                        isValidStorage = false;\n                        try {\n                            dataInStorage = JSON.parse(dataInStorage + \"\");\n\n                            if (\n                                dataInStorage.data &&\n                                dataInStorage.ttl > new Date().getTime()\n                            ) {\n                                this.populateSource(dataInStorage.data, group);\n                                isValidStorage = true;\n\n                                // {debug}\n                                if (this.options.debug) {\n                                    _debug.log({\n                                        node: this.selector,\n                                        function: \"generateSource()\",\n                                        message: 'Source for group \"' + group + '\" found in ' + cache\n                                    });\n                                    _debug.print();\n                                }\n                                // {/debug}\n                            } else {\n                                window[cache].removeItem(\n                                    \"TYPEAHEAD_\" + this.selector + \":\" + group\n                                );\n                            }\n                        } catch (error) {\n                        }\n\n                        if (isValidStorage) continue;\n                    }\n                }\n\n                if (groupSource.data && !groupSource.ajax) {\n                    // #198 Add support for async data source\n                    if (typeof groupSource.data === \"function\") {\n                        groupData = groupSource.data.call(this);\n                        if (Array.isArray(groupData)) {\n                            scope.populateSource(groupData, group);\n                        } else if (typeof groupData.promise === \"function\") {\n                            (function (group) {\n                                $.when(groupData).then(function (deferredData) {\n                                    if (deferredData && Array.isArray(deferredData)) {\n                                        scope.populateSource(deferredData, group);\n                                    }\n                                });\n                            })(group);\n                        }\n                    } else {\n                        this.populateSource($.extend(true, [], groupSource.data), group);\n                    }\n                    continue;\n                }\n\n                if (groupSource.ajax) {\n                    if (!this.requests[group]) {\n                        this.requests[group] = this.generateRequestObject(group);\n                    }\n                    this.requestGroups.push(group);\n                }\n            }\n\n            if (this.requestGroups.length) {\n                this.handleRequests();\n            }\n\n            return !!this.generateGroups.length;\n        },\n\n        generateRequestObject: function (group) {\n            var scope = this,\n                groupSource = this.options.source[group];\n\n            var xhrObject = {\n                request: {\n                    url: groupSource.ajax.url || null,\n                    dataType: \"json\",\n                    beforeSend: function (jqXHR, options) {\n                        // Important to call .abort() in case of dynamic requests\n                        scope.xhr[group] = jqXHR;\n\n                        var beforeSend =\n                            scope.requests[group].callback.beforeSend ||\n                            groupSource.ajax.beforeSend;\n                        typeof beforeSend === \"function\" &&\n                        beforeSend.apply(null, arguments);\n                    }\n                },\n                callback: {\n                    beforeSend: null,\n                    done: null,\n                    fail: null,\n                    then: null,\n                    always: null\n                },\n                extra: {\n                    path: groupSource.ajax.path || null,\n                    group: group\n                },\n                validForGroup: [group]\n            };\n\n            if (typeof groupSource.ajax !== \"function\") {\n                if (groupSource.ajax instanceof Object) {\n                    xhrObject = this.extendXhrObject(xhrObject, groupSource.ajax);\n                }\n\n                if (Object.keys(this.options.source).length > 1) {\n                    for (var _group in this.requests) {\n                        if (!this.requests.hasOwnProperty(_group)) continue;\n                        if (this.requests[_group].isDuplicated) continue;\n\n                        if (\n                            xhrObject.request.url &&\n                            xhrObject.request.url === this.requests[_group].request.url\n                        ) {\n                            this.requests[_group].validForGroup.push(group);\n                            xhrObject.isDuplicated = true;\n                            delete xhrObject.validForGroup;\n                        }\n                    }\n                }\n            }\n\n            return xhrObject;\n        },\n\n        extendXhrObject: function (xhrObject, groupRequest) {\n            if (typeof groupRequest.callback === \"object\") {\n                xhrObject.callback = groupRequest.callback;\n                delete groupRequest.callback;\n            }\n\n            // #132 Fixed beforeSend when using a function as the request object\n            if (typeof groupRequest.beforeSend === \"function\") {\n                xhrObject.callback.beforeSend = groupRequest.beforeSend;\n                delete groupRequest.beforeSend;\n            }\n\n            // Fixes #105 Allow user to define their beforeSend function.\n            // Fixes #181 IE8 incompatibility\n            xhrObject.request = $.extend(true, xhrObject.request, groupRequest);\n\n            // JSONP needs a unique jsonpCallback to run concurrently\n            if (\n                xhrObject.request.dataType.toLowerCase() === \"jsonp\" && !xhrObject.request.jsonpCallback\n            ) {\n                xhrObject.request.jsonpCallback = \"callback_\" + xhrObject.extra.group;\n            }\n\n            return xhrObject;\n        },\n\n        handleRequests: function () {\n            var scope = this,\n                group,\n                requestsCount = this.requestGroups.length;\n\n            if (\n                this.helper.executeCallback.call(\n                    this,\n                    this.options.callback.onSendRequest,\n                    [this.node, this.query]\n                ) === false\n            ) {\n                return;\n            }\n\n            for (var i = 0, ii = this.requestGroups.length; i < ii; ++i) {\n                group = this.requestGroups[i];\n                if (this.requests[group].isDuplicated) continue;\n\n                (function (group, xhrObject) {\n                    if (typeof scope.options.source[group].ajax === \"function\") {\n                        var _groupRequest = scope.options.source[group].ajax.call(\n                            scope,\n                            scope.query\n                        );\n\n                        // Fixes #271 Data is cached inside the xhrObject\n                        xhrObject = scope.extendXhrObject(\n                            scope.generateRequestObject(group),\n                            typeof _groupRequest === \"object\" ? _groupRequest : {}\n                        );\n\n                        if (\n                            typeof xhrObject.request !== \"object\" || !xhrObject.request.url\n                        ) {\n                            // {debug}\n                            if (scope.options.debug) {\n                                _debug.log({\n                                    node: scope.selector,\n                                    function: \"handleRequests\",\n                                    message: 'Source function must return an object containing \".url\" key for group \"' +\n                                    group +\n                                    '\"'\n                                });\n                                _debug.print();\n                            }\n                            // {/debug}\n                            scope.populateSource([], group);\n                            return;\n                        }\n                        scope.requests[group] = xhrObject;\n                    }\n\n                    var _request,\n                        _isExtended = false, // Prevent the main request from being changed\n                        _groupData = {};\n\n                    if (~xhrObject.request.url.indexOf(\"{{query}}\")) {\n                        if (!_isExtended) {\n                            xhrObject = $.extend(true, {}, xhrObject);\n                            _isExtended = true;\n                        }\n                        // #184 Invalid encoded characters on dynamic requests for `{{query}}`\n                        xhrObject.request.url = xhrObject.request.url.replace(\n                            \"{{query}}\",\n                            encodeURIComponent(scope.query)\n                        );\n                    }\n\n                    if (xhrObject.request.data) {\n                        for (var i in xhrObject.request.data) {\n                            if (!xhrObject.request.data.hasOwnProperty(i)) continue;\n                            if (~String(xhrObject.request.data[i]).indexOf(\"{{query}}\")) {\n                                if (!_isExtended) {\n                                    xhrObject = $.extend(true, {}, xhrObject);\n                                    _isExtended = true;\n                                }\n                                // jQuery handles encodeURIComponent when the query is inside the data object\n                                xhrObject.request.data[i] = xhrObject.request.data[i].replace(\n                                    \"{{query}}\",\n                                    scope.query\n                                );\n                                break;\n                            }\n                        }\n                    }\n\n                    $.ajax(xhrObject.request)\n                        .done(function (data, textStatus, jqXHR) {\n                            var _group;\n\n                            for (\n                                var i = 0, ii = xhrObject.validForGroup.length;\n                                i < ii;\n                                i++\n                            ) {\n                                _group = xhrObject.validForGroup[i];\n                                _request = scope.requests[_group];\n\n                                if (_request.callback.done instanceof Function) {\n                                    _groupData[_group] = _request.callback.done.call(\n                                        scope,\n                                        data,\n                                        textStatus,\n                                        jqXHR\n                                    );\n\n                                    // {debug}\n                                    if (\n                                        !Array.isArray(_groupData[_group]) ||\n                                        typeof _groupData[_group] !== \"object\"\n                                    ) {\n                                        if (scope.options.debug) {\n                                            _debug.log({\n                                                node: scope.selector,\n                                                function: \"Ajax.callback.done()\",\n                                                message: \"Invalid returned data has to be an Array\"\n                                            });\n                                            _debug.print();\n                                        }\n                                    }\n                                    // {/debug}\n                                }\n                            }\n                        })\n                        .fail(function (jqXHR, textStatus, errorThrown) {\n                            for (\n                                var i = 0, ii = xhrObject.validForGroup.length;\n                                i < ii;\n                                i++\n                            ) {\n                                _request = scope.requests[xhrObject.validForGroup[i]];\n                                _request.callback.fail instanceof Function &&\n                                _request.callback.fail.call(\n                                    scope,\n                                    jqXHR,\n                                    textStatus,\n                                    errorThrown\n                                );\n                            }\n\n                            // {debug}\n                            if (scope.options.debug) {\n                                _debug.log({\n                                    node: scope.selector,\n                                    function: \"Ajax.callback.fail()\",\n                                    arguments: JSON.stringify(xhrObject.request),\n                                    message: textStatus\n                                });\n\n                                console.log(errorThrown);\n\n                                _debug.print();\n                            }\n                            // {/debug}\n                        })\n                        .always(function (data, textStatus, jqXHR) {\n                            var _group;\n                            for (\n                                var i = 0, ii = xhrObject.validForGroup.length;\n                                i < ii;\n                                i++\n                            ) {\n                                _group = xhrObject.validForGroup[i];\n                                _request = scope.requests[_group];\n                                _request.callback.always instanceof Function &&\n                                _request.callback.always.call(scope, data, textStatus, jqXHR);\n\n                                // #248, #303 Aborted requests would call populate with invalid data\n                                if (typeof jqXHR !== \"object\") return;\n\n                                // #265 Modified data from ajax.callback.done is not being registered (use of _groupData[_group])\n                                scope.populateSource(\n                                    (data !== null && typeof data.promise === \"function\" && []) ||\n                                    _groupData[_group] ||\n                                    data,\n                                    _request.extra.group,\n                                    _request.extra.path || _request.request.path\n                                );\n\n                                requestsCount -= 1;\n                                if (requestsCount === 0) {\n                                    scope.helper.executeCallback.call(\n                                        scope,\n                                        scope.options.callback.onReceiveRequest,\n                                        [scope.node, scope.query]\n                                    );\n                                }\n                            }\n                        })\n                        .then(function (jqXHR, textStatus) {\n                            for (\n                                var i = 0, ii = xhrObject.validForGroup.length;\n                                i < ii;\n                                i++\n                            ) {\n                                _request = scope.requests[xhrObject.validForGroup[i]];\n                                _request.callback.then instanceof Function &&\n                                _request.callback.then.call(scope, jqXHR, textStatus);\n                            }\n                        });\n                })(group, this.requests[group]);\n            }\n        },\n\n        /**\n         * Build the source groups to be cycled for matched results\n         *\n         * @param {Array} data Array of Strings or Array of Objects\n         * @param {String} group\n         * @param {String} [path]\n         * @return {*}\n         */\n        populateSource: function (data, group, path) {\n            var scope = this,\n                groupSource = this.options.source[group],\n                extraData = groupSource.ajax && groupSource.data;\n\n            if (path && typeof path === \"string\") {\n                data = this.helper.namespace.call(this, path, data);\n            }\n\n            if (typeof data === \"undefined\") {\n                // {debug}\n                if (this.options.debug) {\n                    _debug.log({\n                        node: this.selector,\n                        function: \"populateSource()\",\n                        arguments: path,\n                        message: \"Invalid data path.\"\n                    });\n\n                    _debug.print();\n                }\n                // {/debug}\n            }\n\n            if (!Array.isArray(data)) {\n                // {debug}\n                if (this.options.debug) {\n                    _debug.log({\n                        node: this.selector,\n                        function: \"populateSource()\",\n                        arguments: JSON.stringify({group: group}),\n                        message: \"Invalid data type, must be Array type.\"\n                    });\n                    _debug.print();\n                }\n                // {/debug}\n                data = [];\n            }\n\n            if (extraData) {\n                if (typeof extraData === \"function\") {\n                    extraData = extraData();\n                }\n\n                if (Array.isArray(extraData)) {\n                    data = data.concat(extraData);\n                } else {\n                    // {debug}\n                    if (this.options.debug) {\n                        _debug.log({\n                            node: this.selector,\n                            function: \"populateSource()\",\n                            arguments: JSON.stringify(extraData),\n                            message: \"WARNING - this.options.source.\" +\n                            group +\n                            \".data Must be an Array or a function that returns an Array.\"\n                        });\n\n                        _debug.print();\n                    }\n                    // {/debug}\n                }\n            }\n\n            var tmpObj,\n                display = groupSource.display\n                    ? groupSource.display[0] === \"compiled\"\n                        ? groupSource.display[1]\n                        : groupSource.display[0]\n                    : this.options.display[0] === \"compiled\"\n                        ? this.options.display[1]\n                        : this.options.display[0];\n\n            for (var i = 0, ii = data.length; i < ii; i++) {\n                if (data[i] === null || typeof data[i] === \"boolean\") {\n                    // {debug}\n                    if (this.options.debug) {\n                        _debug.log({\n                            node: this.selector,\n                            function: \"populateSource()\",\n                            message: \"WARNING - NULL/BOOLEAN value inside \" +\n                            group +\n                            \"! The data was skipped.\"\n                        });\n\n                        _debug.print();\n                    }\n                    // {/debug}\n                    continue;\n                }\n                if (typeof data[i] === \"string\") {\n                    tmpObj = {};\n                    tmpObj[display] = data[i];\n                    data[i] = tmpObj;\n                }\n                data[i].group = group;\n            }\n\n            if (!this.hasDynamicGroups && this.dropdownFilter.dynamic.length) {\n                var key,\n                    value,\n                    tmpValues = {};\n\n                for (var i = 0, ii = data.length; i < ii; i++) {\n                    for (\n                        var k = 0, kk = this.dropdownFilter.dynamic.length;\n                        k < kk;\n                        k++\n                    ) {\n                        key = this.dropdownFilter.dynamic[k].key;\n\n                        value = data[i][key];\n                        if (!value) continue;\n                        if (!this.dropdownFilter.dynamic[k].value) {\n                            this.dropdownFilter.dynamic[k].value = [];\n                        }\n                        if (!tmpValues[key]) {\n                            tmpValues[key] = [];\n                        }\n                        if (!~tmpValues[key].indexOf(value.toLowerCase())) {\n                            tmpValues[key].push(value.toLowerCase());\n                            this.dropdownFilter.dynamic[k].value.push(value);\n                        }\n                    }\n                }\n            }\n\n            if (this.options.correlativeTemplate) {\n                var template = groupSource.template || this.options.template,\n                    compiledTemplate = \"\";\n\n                if (typeof template === \"function\") {\n                    template = template.call(this, \"\", {});\n                }\n\n                if (!template) {\n                    // {debug}\n                    if (this.options.debug) {\n                        _debug.log({\n                            node: this.selector,\n                            function: \"populateSource()\",\n                            arguments: String(group),\n                            message: \"WARNING - this.options.correlativeTemplate is enabled but no template was found.\"\n                        });\n\n                        _debug.print();\n                    }\n                    // {/debug}\n                } else {\n                    // #109 correlativeTemplate can be an array of display keys instead of the complete template\n                    if (Array.isArray(this.options.correlativeTemplate)) {\n                        for (\n                            var i = 0, ii = this.options.correlativeTemplate.length;\n                            i < ii;\n                            i++\n                        ) {\n                            compiledTemplate +=\n                                \"{{\" + this.options.correlativeTemplate[i] + \"}} \";\n                        }\n                    } else {\n                        // Strip down the html tags, #351 if the template needs \"<>\" use html entities instead &#60;{{email}}&#62;\n                        compiledTemplate = template\n                            .replace(/<.+?>/g, \" \")\n                            .replace(/\\s{2,}/, \" \")\n                            .trim();\n                    }\n\n                    for (var i = 0, ii = data.length; i < ii; i++) {\n                        // Fix #351, convert htmlEntities from the template string\n                        data[i].compiled = $(\"<textarea />\")\n                            .html(\n                                compiledTemplate\n                                    .replace(/\\{\\{([\\w\\-\\.]+)(?:\\|(\\w+))?}}/g, function (match,\n                                                                                         index) {\n                                        return scope.helper.namespace.call(\n                                            scope,\n                                            index,\n                                            data[i],\n                                            \"get\",\n                                            \"\"\n                                        );\n                                    })\n                                    .trim()\n                            )\n                            .text();\n                    }\n\n                    if (groupSource.display) {\n                        if (!~groupSource.display.indexOf(\"compiled\")) {\n                            groupSource.display.unshift(\"compiled\");\n                        }\n                    } else if (!~this.options.display.indexOf(\"compiled\")) {\n                        this.options.display.unshift(\"compiled\");\n                    }\n                }\n            }\n\n            if (this.options.callback.onPopulateSource) {\n                data = this.helper.executeCallback.call(\n                    this,\n                    this.options.callback.onPopulateSource,\n                    [this.node, data, group, path]\n                );\n\n                // {debug}\n                if (this.options.debug) {\n                    if (!data || !Array.isArray(data)) {\n                        _debug.log({\n                            node: this.selector,\n                            function: \"callback.populateSource()\",\n                            message: 'callback.onPopulateSource must return the \"data\" parameter'\n                        });\n\n                        _debug.print();\n                    }\n                }\n                // {/debug}\n            }\n\n            // Save the data inside tmpSource to re-order once every requests are completed\n            this.tmpSource[group] = (Array.isArray(data) && data) || [];\n\n            var cache = this.options.source[group].cache,\n                compression = this.options.source[group].compression,\n                ttl = this.options.source[group].ttl || this.options.ttl;\n\n            if (\n                cache && !window[cache].getItem(\"TYPEAHEAD_\" + this.selector + \":\" + group)\n            ) {\n                if (this.options.callback.onCacheSave) {\n                    data = this.helper.executeCallback.call(\n                        this,\n                        this.options.callback.onCacheSave,\n                        [this.node, data, group, path]\n                    );\n\n                    // {debug}\n                    if (this.options.debug) {\n                        if (!data || !Array.isArray(data)) {\n                            _debug.log({\n                                node: this.selector,\n                                function: \"callback.populateSource()\",\n                                message: 'callback.onCacheSave must return the \"data\" parameter'\n                            });\n\n                            _debug.print();\n                        }\n                    }\n                    // {/debug}\n                }\n\n                var storage = JSON.stringify({\n                    data: data,\n                    ttl: new Date().getTime() + ttl\n                });\n\n                if (compression) {\n                    storage = LZString.compressToUTF16(storage);\n                }\n\n                window[cache].setItem(\n                    \"TYPEAHEAD_\" + this.selector + \":\" + group,\n                    storage\n                );\n            }\n\n            this.incrementGeneratedGroup();\n        },\n\n        incrementGeneratedGroup: function () {\n            this.generatedGroupCount++;\n            if (this.generatedGroupCount !== this.generateGroups.length) {\n                return;\n            }\n\n            this.xhr = {};\n\n            for (var i = 0, ii = this.generateGroups.length; i < ii; i++) {\n                this.source[this.generateGroups[i]] = this.tmpSource[\n                    this.generateGroups[i]\n                    ];\n            }\n\n            if (!this.hasDynamicGroups) {\n                this.buildDropdownItemLayout(\"dynamic\");\n            }\n\n            this.options.loadingAnimation && this.container.removeClass(\"loading\");\n            this.node.trigger(\"search\" + this.namespace);\n        },\n\n        /**\n         * Key Navigation\n         * tab 9: if option is enabled, blur Typeahead\n         * Up 38: select previous item, skip \"group\" item\n         * Down 40: select next item, skip \"group\" item\n         * Right 39: change charAt, if last char fill hint (if options is true)\n         * Esc 27: clears input (is not empty) / blur (if empty)\n         * Enter 13: Select item + submit search\n         *\n         * @param {Object} e Event object\n         * @returns {*}\n         */\n        navigate: function (e) {\n            this.helper.executeCallback.call(\n                this,\n                this.options.callback.onNavigateBefore,\n                [this.node, this.query, e]\n            );\n\n            if (e.keyCode === 27) {\n                // #166 Different browsers do not have the same behaviors by default, lets enforce what we want instead\n                e.preventDefault();\n                if (this.query.length) {\n                    this.resetInput();\n                    this.node.trigger(\"input\" + this.namespace, [e]);\n                } else {\n                    this.node.blur();\n                    this.hideLayout();\n                }\n                return;\n            }\n\n            if (!this.result.length) return;\n\n            var itemList = this.resultContainer\n                    .find(\".\" + this.options.selector.item)\n                    .not(\"[disabled]\"),\n                activeItem = itemList.filter(\".active\"),\n                activeItemIndex = activeItem[0] ? itemList.index(activeItem) : null,\n                activeDataIndex = activeItem[0] ? activeItem.attr(\"data-index\") : null,\n                newActiveItemIndex = null,\n                newActiveDataIndex = null;\n\n            this.clearActiveItem();\n\n            this.helper.executeCallback.call(this, this.options.callback.onLeave, [\n                this.node,\n                (activeItemIndex !== null && itemList.eq(activeItemIndex)) || undefined,\n                (activeDataIndex !== null && this.result[activeDataIndex]) || undefined,\n                e\n            ]);\n\n            if (e.keyCode === 13) {\n                // Chrome needs preventDefault else the input search event is triggered\n                e.preventDefault();\n                if (activeItem.length > 0) {\n                    // #311 When href is defined and \"enter\" is pressed, it needs to act as a \"clicked\" link\n                    if (activeItem.find(\"a:first\")[0].href === \"javascript:;\") {\n                        activeItem.find(\"a:first\").trigger(\"click\", e);\n                    } else {\n                        activeItem.find(\"a:first\")[0].click();\n                    }\n                } else {\n                    this.node\n                        .closest(\"form\")\n                        .trigger(\"submit\");\n                }\n                return;\n            }\n\n            if (e.keyCode === 39) {\n                if (activeItemIndex !== null) {\n                    itemList\n                        .eq(activeItemIndex)\n                        .find(\"a:first\")[0]\n                        .click();\n                } else if (\n                    this.options.hint &&\n                    this.hint.container.val() !== \"\" &&\n                    this.helper.getCaret(this.node[0]) >= this.query.length\n                ) {\n                    itemList\n                        .filter('[data-index=\"' + this.hintIndex + '\"]')\n                        .find(\"a:first\")[0]\n                        .click();\n                }\n                return;\n            }\n\n            // #284 Blur Typeahead when \"Tab\" key is pressed\n            // #326 Improve Up / Down / Tab navigation to have only 1 \"selected\" item\n            if (e.keyCode === 9) {\n                if (this.options.blurOnTab) {\n                    this.hideLayout();\n                } else {\n                    if (activeItem.length > 0) {\n                        if (activeItemIndex + 1 < itemList.length) {\n                            e.preventDefault();\n                            newActiveItemIndex = activeItemIndex + 1;\n                            this.addActiveItem(itemList.eq(newActiveItemIndex));\n                        } else {\n                            this.hideLayout();\n                        }\n                    } else {\n                        if (itemList.length) {\n                            e.preventDefault();\n                            newActiveItemIndex = 0;\n                            this.addActiveItem(itemList.first());\n                        } else {\n                            this.hideLayout();\n                        }\n                    }\n                }\n            } else if (e.keyCode === 38) {\n                e.preventDefault();\n\n                if (activeItem.length > 0) {\n                    if (activeItemIndex - 1 >= 0) {\n                        newActiveItemIndex = activeItemIndex - 1;\n                        this.addActiveItem(itemList.eq(newActiveItemIndex));\n                    }\n                } else if (itemList.length) {\n                    newActiveItemIndex = itemList.length - 1;\n                    this.addActiveItem(itemList.last());\n                }\n            } else if (e.keyCode === 40) {\n                e.preventDefault();\n\n                if (activeItem.length > 0) {\n                    if (activeItemIndex + 1 < itemList.length) {\n                        newActiveItemIndex = activeItemIndex + 1;\n                        this.addActiveItem(itemList.eq(newActiveItemIndex));\n                    }\n                } else if (itemList.length) {\n                    newActiveItemIndex = 0;\n                    this.addActiveItem(itemList.first());\n                }\n            }\n\n            newActiveDataIndex =\n                newActiveItemIndex !== null\n                    ? itemList.eq(newActiveItemIndex).attr(\"data-index\")\n                    : null;\n\n            this.helper.executeCallback.call(this, this.options.callback.onEnter, [\n                this.node,\n                (newActiveItemIndex !== null && itemList.eq(newActiveItemIndex)) ||\n                undefined,\n                (newActiveDataIndex !== null && this.result[newActiveDataIndex]) ||\n                undefined,\n                e\n            ]);\n\n            // #115 Prevent the input from changing when navigating (arrow up / down) the results\n            if (e.preventInputChange && ~[38, 40].indexOf(e.keyCode)) {\n                this.buildHintLayout(\n                    newActiveDataIndex !== null && newActiveDataIndex < this.result.length\n                        ? [this.result[newActiveDataIndex]]\n                        : null\n                );\n            }\n\n            if (this.options.hint && this.hint.container) {\n                this.hint.container.css(\n                    \"color\",\n                    e.preventInputChange\n                        ? this.hint.css.color\n                        : (newActiveDataIndex === null && this.hint.css.color) ||\n                        this.hint.container.css(\"background-color\") ||\n                        \"fff\"\n                );\n            }\n\n            var nodeValue =\n                newActiveDataIndex === null || e.preventInputChange\n                    ? this.rawQuery\n                    : this.getTemplateValue.call(this, this.result[newActiveDataIndex]);\n\n            this.node.val(nodeValue);\n            if (this.isContentEditable) {\n                this.node.text(nodeValue);\n            }\n\n            this.helper.executeCallback.call(\n                this,\n                this.options.callback.onNavigateAfter,\n                [\n                    this.node,\n                    itemList,\n                    (newActiveItemIndex !== null &&\n                        itemList.eq(newActiveItemIndex).find(\"a:first\")) ||\n                    undefined,\n                    (newActiveDataIndex !== null && this.result[newActiveDataIndex]) ||\n                    undefined,\n                    this.query,\n                    e\n                ]\n            );\n        },\n\n        getTemplateValue: function (item) {\n            if (!item) return;\n            var templateValue =\n                (item.group && this.options.source[item.group].templateValue) ||\n                this.options.templateValue;\n            if (typeof templateValue === \"function\") {\n                templateValue = templateValue.call(this);\n            }\n            if (!templateValue) {\n                return this.helper.namespace\n                    .call(this, item.matchedKey, item)\n                    .toString();\n            }\n            var scope = this;\n\n            return templateValue.replace(/\\{\\{([\\w\\-.]+)}}/gi, function (match, index) {\n                return scope.helper.namespace.call(scope, index, item, \"get\", \"\");\n            });\n        },\n\n        clearActiveItem: function () {\n            this.resultContainer\n                .find(\".\" + this.options.selector.item)\n                .removeClass(\"active\");\n        },\n\n        addActiveItem: function (item) {\n            item.addClass(\"active\");\n        },\n\n        searchResult: function () {\n            this.resetLayout();\n\n            if (\n                this.helper.executeCallback.call(this, this.options.callback.onSearch, [\n                    this.node,\n                    this.query\n                ]) === false\n            ) return;\n\n            if (\n                this.searchGroups.length && !(\n                    this.options.multiselect &&\n                    this.options.multiselect.limit &&\n                    this.items.length >= this.options.multiselect.limit\n                )\n            ) {\n                this.searchResultData();\n            }\n\n            this.helper.executeCallback.call(this, this.options.callback.onResult, [\n                this.node,\n                this.query,\n                this.result,\n                this.resultCount,\n                this.resultCountPerGroup\n            ]);\n\n            if (this.isDropdownEvent) {\n                this.helper.executeCallback.call(\n                    this,\n                    this.options.callback.onDropdownFilter,\n                    [this.node, this.query, this.filters.dropdown, this.result]\n                );\n                this.isDropdownEvent = false;\n            }\n        },\n\n        searchResultData: function () {\n            var scope = this,\n                group,\n                groupBy = this.groupBy,\n                groupReference = null,\n                item,\n                match,\n                comparedDisplay,\n                comparedQuery = this.query.toLowerCase(),\n                maxItem = this.options.maxItem,\n                maxItemPerGroup = this.options.maxItemPerGroup,\n                hasDynamicFilters =\n                    this.filters.dynamic && !this.helper.isEmpty(this.filters.dynamic),\n                displayKeys,\n                displayValue,\n                missingDisplayKey = {},\n                groupFilter,\n                groupFilterResult,\n                groupMatcher,\n                groupMatcherResult,\n                matcher =\n                    typeof this.options.matcher === \"function\" && this.options.matcher,\n                correlativeMatch,\n                correlativeQuery,\n                correlativeDisplay;\n\n            if (this.options.accent) {\n                comparedQuery = this.helper.removeAccent.call(this, comparedQuery);\n            }\n\n            for (var i = 0, ii = this.searchGroups.length; i < ii; ++i) {\n                group = this.searchGroups[i];\n\n                if (\n                    this.filters.dropdown &&\n                    this.filters.dropdown.key === \"group\" &&\n                    this.filters.dropdown.value !== group\n                )\n                    continue;\n\n                groupFilter =\n                    typeof this.options.source[group].filter !== \"undefined\"\n                        ? this.options.source[group].filter\n                        : this.options.filter;\n                groupMatcher =\n                    (typeof this.options.source[group].matcher === \"function\" &&\n                        this.options.source[group].matcher) ||\n                    matcher;\n\n                for (var k = 0, kk = this.source[group].length; k < kk; k++) {\n                    if (this.resultItemCount >= maxItem && !this.options.callback.onResult) break;\n                    if (hasDynamicFilters && !this.dynamicFilter.validate.apply(this, [this.source[group][k]])) continue;\n\n                    item = this.source[group][k];\n                    // Validation over null item\n                    if (item === null || typeof item === \"boolean\") continue;\n                    if (this.options.multiselect && !this.isMultiselectUniqueData(item)) continue;\n\n                    // dropdownFilter by custom groups\n                    if (\n                        this.filters.dropdown &&\n                        (item[this.filters.dropdown.key] || \"\").toLowerCase() !==\n                        (this.filters.dropdown.value || \"\").toLowerCase()\n                    ) {\n                        continue;\n                    }\n\n                    groupReference =\n                        groupBy === \"group\"\n                            ? group\n                            : item[groupBy] ? item[groupBy] : item.group;\n\n                    if (groupReference && !this.tmpResult[groupReference]) {\n                        this.tmpResult[groupReference] = [];\n                        this.resultCountPerGroup[groupReference] = 0;\n                    }\n\n                    if (maxItemPerGroup) {\n                        if (\n                            groupBy === \"group\" &&\n                            this.tmpResult[groupReference].length >= maxItemPerGroup && !this.options.callback.onResult\n                        ) {\n                            break;\n                        }\n                    }\n\n                    displayKeys = this.options.source[group].display || this.options.display;\n                    for (var v = 0, vv = displayKeys.length; v < vv; ++v) {\n                        // #286 option.filter: false shouldn't bother about the option.display keys\n                        if (groupFilter !== false) {\n                            // #183 Allow searching for deep source object keys\n                            displayValue = /\\./.test(displayKeys[v])\n                                ? this.helper.namespace.call(this, displayKeys[v], item)\n                                : item[displayKeys[v]];\n\n                            // #182 Continue looping if empty or undefined key\n                            if (typeof displayValue === \"undefined\" || displayValue === \"\") {\n                                // {debug}\n                                if (this.options.debug) {\n                                    missingDisplayKey[v] = {\n                                        display: displayKeys[v],\n                                        data: item\n                                    };\n                                }\n                                // {/debug}\n                                continue;\n                            }\n\n                            displayValue = this.helper.cleanStringFromScript(displayValue);\n                        }\n\n                        if (typeof groupFilter === \"function\") {\n                            groupFilterResult = groupFilter.call(this, item, displayValue);\n\n                            // return undefined to skip to next item\n                            // return false to attempt the matching function on the next displayKey\n                            // return true to add the item to the result list\n                            // return item object to modify the item and add it to the result list\n\n                            if (groupFilterResult === undefined) break;\n                            if (!groupFilterResult) continue;\n                            if (typeof groupFilterResult === \"object\") {\n                                item = groupFilterResult;\n                            }\n                        }\n\n                        if (~[undefined, true].indexOf(groupFilter)) {\n                            comparedDisplay = displayValue;\n                            comparedDisplay = comparedDisplay.toString().toLowerCase();\n\n                            if (this.options.accent) {\n                                comparedDisplay = this.helper.removeAccent.call(\n                                    this,\n                                    comparedDisplay\n                                );\n                            }\n\n                            match = comparedDisplay.indexOf(comparedQuery);\n\n                            if (\n                                this.options.correlativeTemplate &&\n                                displayKeys[v] === \"compiled\" &&\n                                match < 0 &&\n                                /\\s/.test(comparedQuery)\n                            ) {\n                                correlativeMatch = true;\n                                correlativeQuery = comparedQuery.split(\" \");\n                                correlativeDisplay = comparedDisplay;\n                                for (var x = 0, xx = correlativeQuery.length; x < xx; x++) {\n                                    if (correlativeQuery[x] === \"\") continue;\n                                    if (!~correlativeDisplay.indexOf(correlativeQuery[x])) {\n                                        correlativeMatch = false;\n                                        break;\n                                    }\n                                    correlativeDisplay = correlativeDisplay.replace(\n                                        correlativeQuery[x],\n                                        \"\"\n                                    );\n                                }\n                            }\n\n                            if (match < 0 && !correlativeMatch) continue;\n                            if (this.options.offset && match !== 0) continue;\n\n                            if (groupMatcher) {\n                                groupMatcherResult = groupMatcher.call(\n                                    this,\n                                    item,\n                                    displayValue\n                                );\n\n                                // return undefined to skip to next item\n                                // return false to attempt the matching function on the next displayKey\n                                // return true to add the item to the result list\n                                // return item object to modify the item and add it to the result list\n\n                                if (groupMatcherResult === undefined) break;\n                                if (!groupMatcherResult) continue;\n                                if (typeof groupMatcherResult === \"object\") {\n                                    item = groupMatcherResult;\n                                }\n                            }\n                        }\n\n                        this.resultCount++;\n                        this.resultCountPerGroup[groupReference]++;\n\n                        if (this.resultItemCount < maxItem) {\n                            if (\n                                maxItemPerGroup &&\n                                this.tmpResult[groupReference].length >= maxItemPerGroup\n                            ) {\n                                break;\n                            }\n\n                            this.tmpResult[groupReference].push(\n                                $.extend(true, {matchedKey: displayKeys[v]}, item)\n                            );\n                            this.resultItemCount++;\n                        }\n                        break;\n                    }\n\n                    if (!this.options.callback.onResult) {\n                        if (this.resultItemCount >= maxItem) {\n                            break;\n                        }\n                        if (\n                            maxItemPerGroup &&\n                            this.tmpResult[groupReference].length >= maxItemPerGroup\n                        ) {\n                            if (groupBy === \"group\") {\n                                break;\n                            }\n                        }\n                    }\n                }\n            }\n\n            // {debug}\n            if (this.options.debug) {\n                if (!this.helper.isEmpty(missingDisplayKey)) {\n                    _debug.log({\n                        node: this.selector,\n                        function: \"searchResult()\",\n                        arguments: JSON.stringify(missingDisplayKey),\n                        message: \"Missing keys for display, make sure options.display is set properly.\"\n                    });\n\n                    _debug.print();\n                }\n            }\n            // {/debug}\n\n            if (this.options.order) {\n                var displayKeys = [],\n                    displayKey;\n\n                for (var group in this.tmpResult) {\n                    if (!this.tmpResult.hasOwnProperty(group)) continue;\n                    for (var i = 0, ii = this.tmpResult[group].length; i < ii; i++) {\n                        displayKey =\n                            this.options.source[this.tmpResult[group][i].group].display ||\n                            this.options.display;\n                        if (!~displayKeys.indexOf(displayKey[0])) {\n                            displayKeys.push(displayKey[0]);\n                        }\n                    }\n                    this.tmpResult[group].sort(\n                        scope.helper.sort(\n                            displayKeys,\n                            scope.options.order === \"asc\",\n                            function (a) {\n                                return a.toString().toUpperCase();\n                            }\n                        )\n                    );\n                }\n            }\n\n            var concatResults = [],\n                groupOrder = [];\n\n            if (typeof this.options.groupOrder === \"function\") {\n                groupOrder = this.options.groupOrder.apply(this, [\n                    this.node,\n                    this.query,\n                    this.tmpResult,\n                    this.resultCount,\n                    this.resultCountPerGroup\n                ]);\n            } else if (Array.isArray(this.options.groupOrder)) {\n                groupOrder = this.options.groupOrder;\n            } else if (\n                typeof this.options.groupOrder === \"string\" && ~[\"asc\", \"desc\"].indexOf(this.options.groupOrder)\n            ) {\n                groupOrder = Object.keys(this.tmpResult).sort(\n                    scope.helper.sort([], scope.options.groupOrder === \"asc\", function (a) {\n                        return a.toString().toUpperCase();\n                    })\n                );\n            } else {\n                groupOrder = Object.keys(this.tmpResult);\n            }\n\n            for (var i = 0, ii = groupOrder.length; i < ii; i++) {\n                concatResults = concatResults.concat(this.tmpResult[groupOrder[i]] || []);\n            }\n\n            // #286 groupTemplate option was deleting group reference Array\n            this.groups = JSON.parse(JSON.stringify(groupOrder));\n\n            this.result = concatResults;\n        },\n\n        buildLayout: function () {\n            this.buildHtmlLayout();\n\n            this.buildBackdropLayout();\n\n            this.buildHintLayout();\n\n            if (this.options.callback.onLayoutBuiltBefore) {\n                this.helper.executeCallback.call(\n                    this,\n                    this.options.callback.onLayoutBuiltBefore,\n                    [this.node, this.query, this.result, this.resultHtml]\n                );\n            }\n\n            if (this.resultHtml instanceof $) {\n                this.resultContainer.html(this.resultHtml);\n            }\n\n            if (this.options.callback.onLayoutBuiltAfter) {\n                this.helper.executeCallback.call(\n                    this,\n                    this.options.callback.onLayoutBuiltAfter,\n                    [this.node, this.query, this.result]\n                );\n            }\n        },\n\n        buildHtmlLayout: function () {\n            // #150 Add the option to have no resultList but still perform the search and trigger the callbacks\n            if (this.options.resultContainer === false) return;\n\n            if (!this.resultContainer) {\n                this.resultContainer = $(\"<div/>\", {\n                    class: this.options.selector.result\n                });\n\n                this.container.append(this.resultContainer);\n            }\n\n            var emptyTemplate;\n            if (!this.result.length) {\n                if (\n                    this.options.multiselect &&\n                    this.options.multiselect.limit &&\n                    this.items.length >= this.options.multiselect.limit\n                ) {\n                    if (this.options.multiselect.limitTemplate) {\n                        emptyTemplate =\n                            typeof this.options.multiselect.limitTemplate === \"function\"\n                                ? this.options.multiselect.limitTemplate.call(this, this.query)\n                                : this.options.multiselect.limitTemplate.replace(\n                                /\\{\\{query}}/gi,\n                                $(\"<div>\")\n                                    .text(this.helper.cleanStringFromScript(this.query))\n                                    .html()\n                                );\n                    } else {\n                        emptyTemplate =\n                            \"Can't select more than \" + this.items.length + \" items.\";\n                    }\n                } else if (this.options.emptyTemplate && this.query !== \"\") {\n                    emptyTemplate =\n                        typeof this.options.emptyTemplate === \"function\"\n                            ? this.options.emptyTemplate.call(this, this.query)\n                            : this.options.emptyTemplate.replace(\n                            /\\{\\{query}}/gi,\n                            $(\"<div>\")\n                                .text(this.helper.cleanStringFromScript(this.query))\n                                .html()\n                            );\n                } else {\n                    return;\n                }\n            }\n\n            var _query = this.query.toLowerCase();\n            if (this.options.accent) {\n                _query = this.helper.removeAccent.call(this, _query);\n            }\n\n            var scope = this,\n                groupTemplate = this.groupTemplate || \"<ul></ul>\",\n                hasEmptyTemplate = false;\n\n            if (this.groupTemplate) {\n                groupTemplate = $(\n                    groupTemplate.replace(\n                        /<([^>]+)>\\{\\{(.+?)}}<\\/[^>]+>/g,\n                        function (match, tag, group, offset, string) {\n                            var template = \"\",\n                                groups = group === \"group\" ? scope.groups : [group];\n\n                            if (!scope.result.length) {\n                                if (hasEmptyTemplate === true) return \"\";\n                                hasEmptyTemplate = true;\n\n                                return (\n                                    \"<\" + tag + ' class=\"' + scope.options.selector.empty + '\">' + emptyTemplate + \"</\" + tag + \">\"\n                                );\n                            }\n\n                            for (var i = 0, ii = groups.length; i < ii; ++i) {\n                                template += \"<\" + tag + ' data-group-template=\"' + groups[i] + '\"><ul></ul></' + tag + \">\";\n                            }\n\n                            return template;\n                        }\n                    )\n                );\n            } else {\n                groupTemplate = $(groupTemplate);\n                if (!this.result.length) {\n                    groupTemplate.append(\n                        emptyTemplate instanceof $\n                            ? emptyTemplate\n                            : '<li class=\"' +\n                            scope.options.selector.empty +\n                            '\">' +\n                            emptyTemplate +\n                            \"</li>\"\n                    );\n                }\n            }\n\n            groupTemplate.addClass(\n                this.options.selector.list +\n                (this.helper.isEmpty(this.result) ? \" empty\" : \"\")\n            );\n\n            var _group,\n                _groupTemplate,\n                _item,\n                _href,\n                _liHtml,\n                _template,\n                _aHtml,\n                _display,\n                _displayKeys,\n                _displayValue,\n                _unusedGroups =\n                    (this.groupTemplate && this.result.length && scope.groups) || [],\n                _tmpIndexOf;\n\n            for (var i = 0, ii = this.result.length; i < ii; ++i) {\n                _item = this.result[i];\n                _group = _item.group;\n                _href =\n                    (!this.options.multiselect &&\n                        this.options.source[_item.group].href) ||\n                    this.options.href;\n                _display = [];\n                _displayKeys =\n                    this.options.source[_item.group].display || this.options.display;\n\n                if (this.options.group) {\n                    _group = _item[this.options.group.key];\n                    if (this.options.group.template) {\n                        if (typeof this.options.group.template === \"function\") {\n                            _groupTemplate = this.options.group.template.call(this, _item);\n                        } else if (typeof this.options.group.template === \"string\") {\n                            _groupTemplate = this.options.group.template.replace(\n                                /\\{\\{([\\w\\-\\.]+)}}/gi,\n                                function (match, index) {\n                                    return scope.helper.namespace.call(\n                                        scope,\n                                        index,\n                                        _item,\n                                        \"get\",\n                                        \"\"\n                                    );\n                                }\n                            );\n                        }\n                    }\n\n                    if (!groupTemplate.find('[data-search-group=\"' + _group + '\"]')[0]) {\n                        (this.groupTemplate\n                            ? groupTemplate.find('[data-group-template=\"' + _group + '\"] ul')\n                            : groupTemplate).append(\n                            $(\"<li/>\", {\n                                class: scope.options.selector.group,\n                                html: $(\"<a/>\", {\n                                    href: \"javascript:;\",\n                                    html: _groupTemplate || _group,\n                                    tabindex: -1\n                                }),\n                                \"data-search-group\": _group\n                            })\n                        );\n                    }\n                }\n\n                if (this.groupTemplate && _unusedGroups.length) {\n                    _tmpIndexOf = _unusedGroups.indexOf(_group || _item.group);\n                    if (~_tmpIndexOf) {\n                        _unusedGroups.splice(_tmpIndexOf, 1);\n                    }\n                }\n\n                _liHtml = $(\"<li/>\", {\n                    class: scope.options.selector.item + \" \" + scope.options.selector.group + \"-\" + this.helper.slugify.call(this, _group),\n                    disabled: _item.disabled ? true : false,\n                    \"data-group\": _group,\n                    \"data-index\": i,\n                    html: $(\"<a/>\", {\n                        href: _href && !_item.disabled\n                            ? (function (href, item) {\n                                return item.href = scope.generateHref.call(\n                                    scope,\n                                    href,\n                                    item\n                                );\n                            })(_href, _item)\n                            : \"javascript:;\",\n                        html: function () {\n                            _template =\n                                (_item.group && scope.options.source[_item.group].template) ||\n                                scope.options.template;\n\n                            if (_template) {\n                                if (typeof _template === \"function\") {\n                                    _template = _template.call(scope, scope.query, _item);\n                                }\n\n                                _aHtml = _template.replace(\n                                    /\\{\\{([^\\|}]+)(?:\\|([^}]+))*}}/gi,\n                                    function (match, index, options) {\n                                        var value = scope.helper.cleanStringFromScript(\n                                            String(\n                                                scope.helper.namespace.call(\n                                                    scope,\n                                                    index,\n                                                    _item,\n                                                    \"get\",\n                                                    \"\"\n                                                )\n                                            )\n                                        );\n\n                                        // #151 Slugify should be an option, not enforced\n                                        options = (options && options.split(\"|\")) || [];\n                                        if (~options.indexOf(\"slugify\")) {\n                                            value = scope.helper.slugify.call(scope, value);\n                                        }\n\n                                        if (!~options.indexOf(\"raw\")) {\n                                            if (\n                                                scope.options.highlight === true &&\n                                                _query && ~_displayKeys.indexOf(index)\n                                            ) {\n                                                value = scope.helper.highlight.call(\n                                                    scope,\n                                                    value,\n                                                    _query.split(\" \"),\n                                                    scope.options.accent\n                                                );\n                                            }\n                                        }\n                                        return value;\n                                    }\n                                );\n                            } else {\n                                for (var i = 0, ii = _displayKeys.length; i < ii; i++) {\n                                    _displayValue = /\\./.test(_displayKeys[i])\n                                        ? scope.helper.namespace.call(\n                                            scope,\n                                            _displayKeys[i],\n                                            _item,\n                                            \"get\",\n                                            \"\"\n                                        )\n                                        : _item[_displayKeys[i]];\n\n                                    if (\n                                        typeof _displayValue === \"undefined\" ||\n                                        _displayValue === \"\"\n                                    )\n                                        continue;\n\n                                    _display.push(_displayValue);\n                                }\n\n                                _aHtml =\n                                    '<span class=\"' +\n                                    scope.options.selector.display +\n                                    '\">' +\n                                    scope.helper.cleanStringFromScript(\n                                        String(_display.join(\" \"))\n                                    ) +\n                                    \"</span>\";\n                            }\n\n                            if (\n                                (scope.options.highlight === true && _query && !_template) ||\n                                scope.options.highlight === \"any\"\n                            ) {\n                                _aHtml = scope.helper.highlight.call(\n                                    scope,\n                                    _aHtml,\n                                    _query.split(\" \"),\n                                    scope.options.accent\n                                );\n                            }\n\n                            $(this).append(_aHtml);\n                        }\n                    })\n                });\n\n                (function (i, item, liHtml) {\n                    liHtml.on(\"click\", function (e, originalEvent) {\n                        if (item.disabled) {\n                            e.preventDefault();\n                            return;\n                        }\n\n                        // #208 - Attach \"keyboard Enter\" original event\n                        if (originalEvent && typeof originalEvent === \"object\") {\n                            e.originalEvent = originalEvent;\n                        }\n\n                        if (scope.options.mustSelectItem && scope.helper.isEmpty(item)) {\n                            e.preventDefault();\n                            return;\n                        }\n\n                        if (scope.options.multiselect) {\n                            scope.items.push(item);\n                            scope.comparedItems.push(scope.getMultiselectComparedData(item));\n                        } else {\n                            scope.item = item;\n                        }\n\n                        if (\n                            scope.helper.executeCallback.call(\n                                scope,\n                                scope.options.callback.onClickBefore,\n                                [scope.node, $(this), item, e]\n                            ) === false\n                        ) return;\n\n                        if (\n                            (e.originalEvent && e.originalEvent.defaultPrevented) ||\n                            e.isDefaultPrevented()\n                        ) return;\n\n                        var templateValue = scope.getTemplateValue.call(scope, item);\n\n                        if (scope.options.multiselect) {\n                            scope.query = scope.rawQuery = \"\";\n                            scope.addMultiselectItemLayout(templateValue);\n                        } else {\n                            scope.focusOnly = true;\n                            scope.query = scope.rawQuery = templateValue;\n                            if (scope.isContentEditable) {\n                                scope.node.text(scope.query);\n                                scope.helper.setCaretAtEnd(scope.node[0]);\n                            }\n                        }\n\n                        scope.hideLayout();\n\n                        scope.node\n                            .val(scope.query)\n                            .focus();\n\n                        scope.helper.executeCallback.call(\n                            scope,\n                            scope.options.callback.onClickAfter,\n                            [scope.node, $(this), item, e]\n                        );\n                    });\n                    liHtml.on(\"mouseenter\", function (e) {\n                        if (!item.disabled) {\n                            scope.clearActiveItem();\n                            scope.addActiveItem($(this));\n                        }\n                        scope.helper.executeCallback.call(\n                            scope,\n                            scope.options.callback.onEnter,\n                            [scope.node, $(this), item, e]\n                        );\n                    });\n                    liHtml.on(\"mouseleave\", function (e) {\n                        if (!item.disabled) {\n                            scope.clearActiveItem();\n                        }\n                        scope.helper.executeCallback.call(\n                            scope,\n                            scope.options.callback.onLeave,\n                            [scope.node, $(this), item, e]\n                        );\n                    });\n                })(i, _item, _liHtml);\n\n                (this.groupTemplate\n                    ? groupTemplate.find('[data-group-template=\"' + _group + '\"] ul')\n                    : groupTemplate).append(_liHtml);\n            }\n\n            if (this.result.length && _unusedGroups.length) {\n                for (var i = 0, ii = _unusedGroups.length; i < ii; ++i) {\n                    groupTemplate\n                        .find('[data-group-template=\"' + _unusedGroups[i] + '\"]')\n                        .remove();\n                }\n            }\n\n            this.resultHtml = groupTemplate;\n        },\n\n        generateHref: function (href, item) {\n            var scope = this;\n\n            if (typeof href === \"string\") {\n                href = href.replace(\n                    /\\{\\{([^\\|}]+)(?:\\|([^}]+))*}}/gi,\n                    function (match, index, options) {\n                        var value = scope.helper.namespace.call(\n                            scope,\n                            index,\n                            item,\n                            \"get\",\n                            \"\"\n                        );\n\n                        // #151 Slugify should be an option, not enforced\n                        options = (options && options.split(\"|\")) || [];\n                        if (~options.indexOf(\"slugify\")) {\n                            value = scope.helper.slugify.call(scope, value);\n                        }\n\n                        return value;\n                    }\n                );\n            } else if (typeof href === \"function\") {\n                href = href.call(this, item);\n            }\n\n            return href;\n        },\n\n        getMultiselectComparedData: function (item) {\n            var uniqueComparedItem = \"\";\n            if (Array.isArray(this.options.multiselect.matchOn)) {\n                for (\n                    var i = 0, ii = this.options.multiselect.matchOn.length;\n                    i < ii;\n                    ++i\n                ) {\n                    uniqueComparedItem +=\n                        typeof item[this.options.multiselect.matchOn[i]] !== \"undefined\"\n                            ? item[this.options.multiselect.matchOn[i]]\n                            : \"\";\n                }\n            } else {\n                var tmpItem = JSON.parse(JSON.stringify(item)),\n                    extraKeys = [\"group\", \"matchedKey\", \"compiled\", \"href\"];\n\n                for (var i = 0, ii = extraKeys.length; i < ii; ++i) {\n                    delete tmpItem[extraKeys[i]];\n                }\n                uniqueComparedItem = JSON.stringify(tmpItem);\n            }\n            return uniqueComparedItem;\n        },\n\n        buildBackdropLayout: function () {\n            if (!this.options.backdrop) return;\n\n            if (!this.backdrop.container) {\n                this.backdrop.css = $.extend(\n                    {\n                        opacity: 0.6,\n                        filter: \"alpha(opacity=60)\",\n                        position: \"fixed\",\n                        top: 0,\n                        right: 0,\n                        bottom: 0,\n                        left: 0,\n                        \"z-index\": 1040,\n                        \"background-color\": \"#000\"\n                    },\n                    this.options.backdrop\n                );\n\n                this.backdrop.container = $(\"<div/>\", {\n                    class: this.options.selector.backdrop,\n                    css: this.backdrop.css\n                }).insertAfter(this.container);\n            }\n            this.container.addClass(\"backdrop\").css({\n                \"z-index\": this.backdrop.css[\"z-index\"] + 1,\n                position: \"relative\"\n            });\n        },\n\n        buildHintLayout: function (result) {\n            if (!this.options.hint) return;\n            // #144 hint doesn't overlap with the input when the query is too long\n            if (this.node[0].scrollWidth > Math.ceil(this.node.innerWidth())) {\n                this.hint.container && this.hint.container.val(\"\");\n                return;\n            }\n\n            var scope = this,\n                hint = \"\",\n                result = result || this.result,\n                query = this.query.toLowerCase();\n\n            if (this.options.accent) {\n                query = this.helper.removeAccent.call(this, query);\n            }\n\n            this.hintIndex = null;\n\n            if (this.searchGroups.length) {\n                if (!this.hint.container) {\n                    this.hint.css = $.extend(\n                        {\n                            \"border-color\": \"transparent\",\n                            position: \"absolute\",\n                            top: 0,\n                            display: \"inline\",\n                            \"z-index\": -1,\n                            float: \"none\",\n                            color: \"silver\",\n                            \"box-shadow\": \"none\",\n                            cursor: \"default\",\n                            \"-webkit-user-select\": \"none\",\n                            \"-moz-user-select\": \"none\",\n                            \"-ms-user-select\": \"none\",\n                            \"user-select\": \"none\"\n                        },\n                        this.options.hint\n                    );\n\n                    this.hint.container = $(\"<\" + this.node[0].nodeName + \"/>\", {\n                        type: this.node.attr(\"type\"),\n                        class: this.node.attr(\"class\"),\n                        readonly: true,\n                        unselectable: \"on\",\n                        \"aria-hidden\": \"true\",\n                        tabindex: -1,\n                        click: function () {\n                            // IE8 Fix\n                            scope.node.focus();\n                        }\n                    })\n                        .addClass(this.options.selector.hint)\n                        .css(this.hint.css)\n                        .insertAfter(this.node);\n\n                    this.node.parent().css({\n                        position: \"relative\"\n                    });\n                }\n\n                this.hint.container.css(\"color\", this.hint.css.color);\n\n                // Do not display hint for empty query\n                if (query) {\n                    var _displayKeys, _group, _comparedValue;\n\n                    for (var i = 0, ii = result.length; i < ii; i++) {\n                        if (result[i].disabled) continue;\n\n                        _group = result[i].group;\n                        _displayKeys =\n                            this.options.source[_group].display || this.options.display;\n\n                        for (var k = 0, kk = _displayKeys.length; k < kk; k++) {\n                            _comparedValue = String(result[i][_displayKeys[k]]).toLowerCase();\n                            if (this.options.accent) {\n                                _comparedValue = this.helper.removeAccent.call(\n                                    this,\n                                    _comparedValue\n                                );\n                            }\n\n                            if (_comparedValue.indexOf(query) === 0) {\n                                hint = String(result[i][_displayKeys[k]]);\n                                this.hintIndex = i;\n                                break;\n                            }\n                        }\n                        if (this.hintIndex !== null) {\n                            break;\n                        }\n                    }\n                }\n\n                var hintValue =\n                    (hint.length > 0 &&\n                        this.rawQuery + hint.substring(this.query.length)) ||\n                    \"\";\n                this.hint.container.val(hintValue);\n\n                if (this.isContentEditable) {\n                    this.hint.container.text(hintValue);\n                }\n            }\n        },\n\n        buildDropdownLayout: function () {\n            if (!this.options.dropdownFilter) return;\n\n            var scope = this;\n\n            $(\"<span/>\", {\n                class: this.options.selector.filter,\n                html: function () {\n                    $(this).append(\n                        $(\"<button/>\", {\n                            type: \"button\",\n                            class: scope.options.selector.filterButton,\n                            style: \"display: none;\",\n                            click: function () {\n                                scope.container.toggleClass(\"filter\");\n\n                                var _ns = scope.namespace + \"-dropdown-filter\";\n\n                                $(\"html\").off(_ns);\n\n                                if (scope.container.hasClass(\"filter\")) {\n                                    $(\"html\").on(\"click\" + _ns + \" touchend\" + _ns, function (e) {\n                                        if (\n                                            ($(e.target).closest(\n                                                \".\" + scope.options.selector.filter\n                                                )[0] &&\n                                                $(e.target).closest(scope.container)[0]) ||\n                                            scope.hasDragged\n                                        )\n                                            return;\n                                        scope.container.removeClass(\"filter\");\n\n                                        $(\"html\").off(_ns);\n                                    });\n                                }\n                            }\n                        })\n                    );\n\n                    $(this).append(\n                        $(\"<ul/>\", {\n                            class: scope.options.selector.dropdown\n                        })\n                    );\n                }\n            }).insertAfter(scope.container.find(\".\" + scope.options.selector.query));\n        },\n\n        buildDropdownItemLayout: function (type) {\n            if (!this.options.dropdownFilter) return;\n\n            var scope = this,\n                template,\n                all =\n                    (typeof this.options.dropdownFilter === \"string\" &&\n                        this.options.dropdownFilter) ||\n                    \"All\",\n                ulScope = this.container.find(\".\" + this.options.selector.dropdown),\n                filter;\n\n            // Use regular groups defined in options.source\n            if (\n                type === \"static\" &&\n                (this.options.dropdownFilter === true ||\n                    typeof this.options.dropdownFilter === \"string\")\n            ) {\n                this.dropdownFilter.static.push({\n                    key: \"group\",\n                    template: \"{{group}}\",\n                    all: all,\n                    value: Object.keys(this.options.source)\n                });\n            }\n\n            for (var i = 0, ii = this.dropdownFilter[type].length; i < ii; i++) {\n                filter = this.dropdownFilter[type][i];\n\n                if (!Array.isArray(filter.value)) {\n                    filter.value = [filter.value];\n                }\n\n                if (filter.all) {\n                    this.dropdownFilterAll = filter.all;\n                }\n\n                for (var k = 0, kk = filter.value.length; k <= kk; k++) {\n                    // Only add \"all\" at the last filter iteration\n                    if (k === kk && i !== ii - 1) {\n                        continue;\n                    } else if (k === kk && i === ii - 1) {\n                        if (type === \"static\" && this.dropdownFilter.dynamic.length) {\n                            continue;\n                        }\n                    }\n\n                    template = this.dropdownFilterAll || all;\n                    if (filter.value[k]) {\n                        if (filter.template) {\n                            template = filter.template.replace(\n                                new RegExp(\"{{\" + filter.key + \"}}\", \"gi\"),\n                                filter.value[k]\n                            );\n                        } else {\n                            template = filter.value[k];\n                        }\n                    } else {\n                        this.container\n                            .find(\".\" + scope.options.selector.filterButton)\n                            .html(template);\n                    }\n\n                    (function (k, filter, template) {\n                        ulScope.append(\n                            $(\"<li/>\", {\n                                class: scope.options.selector.dropdownItem +\n                                \" \" +\n                                scope.helper.slugify.call(\n                                    scope,\n                                    filter.key + \"-\" + (filter.value[k] || all)\n                                ),\n                                html: $(\"<a/>\", {\n                                    href: \"javascript:;\",\n                                    html: template,\n                                    click: function (e) {\n                                        e.preventDefault();\n                                        _selectFilter.call(scope, {\n                                            key: filter.key,\n                                            value: filter.value[k] || \"*\",\n                                            template: template\n                                        });\n                                    }\n                                })\n                            })\n                        );\n                    })(k, filter, template);\n                }\n            }\n\n            if (this.dropdownFilter[type].length) {\n                this.container\n                    .find(\".\" + scope.options.selector.filterButton)\n                    .removeAttr(\"style\");\n            }\n\n            /**\n             * @private\n             * Select the filter and rebuild the result group\n             *\n             * @param {object} item\n             */\n            function _selectFilter(item) {\n                if (item.value === \"*\") {\n                    delete this.filters.dropdown;\n                } else {\n                    this.filters.dropdown = item;\n                }\n\n                this.container\n                    .removeClass(\"filter\")\n                    .find(\".\" + this.options.selector.filterButton)\n                    .html(item.template);\n\n                this.isDropdownEvent = true;\n                this.node.trigger(\"search\" + this.namespace);\n\n                if (this.options.multiselect) {\n                    this.adjustInputSize();\n                }\n\n                this.node.focus();\n            }\n        },\n\n        dynamicFilter: {\n            isEnabled: false,\n            init: function () {\n                if (!this.options.dynamicFilter) return;\n\n                this.dynamicFilter.bind.call(this);\n                this.dynamicFilter.isEnabled = true;\n            },\n\n            validate: function (item) {\n                var isValid,\n                    softValid = null,\n                    hardValid = null,\n                    itemValue;\n\n                for (var key in this.filters.dynamic) {\n                    if (!this.filters.dynamic.hasOwnProperty(key)) continue;\n                    if (!!~key.indexOf(\".\")) {\n                        itemValue = this.helper.namespace.call(this, key, item, \"get\");\n                    } else {\n                        itemValue = item[key];\n                    }\n\n                    if (this.filters.dynamic[key].modifier === \"|\" && !softValid) {\n                        softValid = itemValue == this.filters.dynamic[key].value || false;\n                    }\n\n                    if (this.filters.dynamic[key].modifier === \"&\") {\n                        // Leaving \"==\" in case of comparing number with string\n                        if (itemValue == this.filters.dynamic[key].value) {\n                            hardValid = true;\n                        } else {\n                            hardValid = false;\n                            break;\n                        }\n                    }\n                }\n\n                isValid = softValid;\n                if (hardValid !== null) {\n                    isValid = hardValid;\n                    if (hardValid === true && softValid !== null) {\n                        isValid = softValid;\n                    }\n                }\n\n                return !!isValid;\n            },\n\n            set: function (key, value) {\n                var matches = key.match(/^([|&])?(.+)/);\n\n                if (!value) {\n                    delete this.filters.dynamic[matches[2]];\n                } else {\n                    this.filters.dynamic[matches[2]] = {\n                        modifier: matches[1] || \"|\",\n                        value: value\n                    };\n                }\n\n                if (this.dynamicFilter.isEnabled) {\n                    this.generateSource();\n                }\n            },\n            bind: function () {\n                var scope = this,\n                    filter;\n\n                for (var i = 0, ii = this.options.dynamicFilter.length; i < ii; i++) {\n                    filter = this.options.dynamicFilter[i];\n\n                    if (typeof filter.selector === \"string\") {\n                        filter.selector = $(filter.selector);\n                    }\n\n                    if (\n                        !(filter.selector instanceof $) || !filter.selector[0] || !filter.key\n                    ) {\n                        // {debug}\n                        if (this.options.debug) {\n                            _debug.log({\n                                node: this.selector,\n                                function: \"buildDynamicLayout()\",\n                                message: 'Invalid jQuery selector or jQuery Object for \"filter.selector\" or missing filter.key'\n                            });\n\n                            _debug.print();\n                        }\n                        // {/debug}\n                        continue;\n                    }\n\n                    (function (filter) {\n                        filter.selector\n                            .off(scope.namespace)\n                            .on(\"change\" + scope.namespace, function () {\n                                scope.dynamicFilter.set.apply(scope, [\n                                    filter.key,\n                                    scope.dynamicFilter.getValue(this)\n                                ]);\n                            })\n                            .trigger(\"change\" + scope.namespace);\n                    })(filter);\n                }\n            },\n\n            getValue: function (tag) {\n                var value;\n                if (tag.tagName === \"SELECT\") {\n                    value = tag.value;\n                } else if (tag.tagName === \"INPUT\") {\n                    if (tag.type === \"checkbox\") {\n                        value =\n                            (tag.checked && tag.getAttribute(\"value\")) || tag.checked || null;\n                    } else if (tag.type === \"radio\" && tag.checked) {\n                        value = tag.value;\n                    }\n                }\n                return value;\n            }\n        },\n\n        buildMultiselectLayout: function () {\n            if (!this.options.multiselect) return;\n            var scope = this;\n            var multiselectData;\n\n            this.label.container = $(\"<span/>\", {\n                class: this.options.selector.labelContainer,\n                \"data-padding-left\": parseFloat(this.node.css(\"padding-left\")) || 0,\n                \"data-padding-right\": parseFloat(this.node.css(\"padding-right\")) || 0,\n                \"data-padding-top\": parseFloat(this.node.css(\"padding-top\")) || 0,\n                click: function (e) {\n                    if ($(e.target).hasClass(scope.options.selector.labelContainer)) {\n                        scope.node.focus();\n                    }\n                }\n            });\n\n            this.node\n                .closest(\".\" + this.options.selector.query)\n                .prepend(this.label.container);\n\n            if (!this.options.multiselect.data) return;\n\n            if (Array.isArray(this.options.multiselect.data)) {\n                this.populateMultiselectData(this.options.multiselect.data);\n            } else if (typeof this.options.multiselect.data === 'function') {\n                multiselectData = this.options.multiselect.data.call(this);\n                if (Array.isArray(multiselectData)) {\n                    this.populateMultiselectData(multiselectData);\n                } else if (typeof multiselectData.promise === \"function\") {\n                    $.when(multiselectData).then(function (deferredData) {\n                        if (deferredData && Array.isArray(deferredData)) {\n                            scope.populateMultiselectData(deferredData);\n                        }\n                    });\n                }\n            }\n        },\n\n        isMultiselectUniqueData: function (data) {\n            var isUniqueData = true;\n            for (var x = 0, xx = this.comparedItems.length; x < xx; ++x) {\n                if (\n                    this.comparedItems[x] ===\n                    this.getMultiselectComparedData(data)\n                ) {\n                    isUniqueData = false;\n                    break;\n                }\n            }\n            return isUniqueData;\n        },\n\n        populateMultiselectData: function (data) {\n            for (var i = 0, ii = data.length; i < ii; ++i) {\n                if (!this.isMultiselectUniqueData(data[i])) continue;\n\n                this.items.push(data[i]);\n                this.comparedItems.push(\n                    this.getMultiselectComparedData(data[i])\n                );\n                this.addMultiselectItemLayout(\n                    this.getTemplateValue(data[i])\n                );\n            }\n\n            this.node.trigger(\"search\" + this.namespace, { origin: 'populateMultiselectData' });\n        },\n\n        addMultiselectItemLayout: function (templateValue) {\n            var scope = this,\n                htmlTag = this.options.multiselect.href ? \"a\" : \"span\";\n\n            var label = $(\"<span/>\", {\n                class: this.options.selector.label,\n                html: $(\"<\" + htmlTag + \"/>\", {\n                    text: templateValue,\n                    click: function (e) {\n                        var currentLabel = $(this).closest(\n                            \".\" + scope.options.selector.label\n                            ),\n                            index = scope.label.container\n                                .find(\".\" + scope.options.selector.label)\n                                .index(currentLabel);\n\n                        scope.options.multiselect.callback && scope.helper.executeCallback.call(\n                            scope,\n                            scope.options.multiselect.callback.onClick,\n                            [scope.node, scope.items[index], e]\n                        );\n                    },\n                    href: this.options.multiselect.href\n                        ? (function (item) {\n                            return scope.generateHref.call(\n                                scope,\n                                scope.options.multiselect.href,\n                                item\n                            );\n                        })(scope.items[scope.items.length - 1])\n                        : null\n                })\n            });\n\n            label.append(\n                $(\"<span/>\", {\n                    class: this.options.selector.cancelButton,\n                    html: \"×\",\n                    click: function (e) {\n                        var label = $(this).closest(\n                            \".\" + scope.options.selector.label\n                            ),\n                            index = scope.label.container\n                                .find(\".\" + scope.options.selector.label)\n                                .index(label);\n\n                        scope.cancelMultiselectItem(index, label, e);\n                    }\n                })\n            );\n\n            this.label.container.append(label);\n            this.adjustInputSize();\n        },\n\n        cancelMultiselectItem: function (index, label, e) {\n            var item = this.items[index];\n\n            label = label\n                || this.label.container\n                    .find('.' + this.options.selector.label)\n                    .eq(index);\n\n            label.remove();\n\n            this.items.splice(index, 1);\n            this.comparedItems.splice(index, 1);\n\n            this.options.multiselect.callback && this.helper.executeCallback.call(\n                this,\n                this.options.multiselect.callback.onCancel,\n                [this.node, item, e]\n            );\n\n            this.adjustInputSize();\n\n            this.focusOnly = true;\n            this.node.focus().trigger('input' + this.namespace, { origin: 'cancelMultiselectItem' });\n        },\n\n        adjustInputSize: function () {\n            var nodeWidth =\n                this.node[0].getBoundingClientRect().width -\n                (parseFloat(this.label.container.data(\"padding-right\")) || 0) -\n                (parseFloat(this.label.container.css(\"padding-left\")) || 0);\n\n            var labelOuterWidth = 0,\n                numberOfRows = 0,\n                currentRowWidth = 0,\n                isRowAdded = false,\n                labelOuterHeight = 0;\n\n            this.label.container\n                .find(\".\" + this.options.selector.label)\n                .filter(function (i, v) {\n                    if (i === 0) {\n                        labelOuterHeight =\n                            $(v)[0].getBoundingClientRect().height +\n                            parseFloat($(v).css(\"margin-bottom\") || 0);\n                    }\n\n                    // labelOuterWidth = Math.round($(v)[0].getBoundingClientRect().width * 100) / 100 + parseFloat($(v).css('margin-right'));\n                    labelOuterWidth =\n                        $(v)[0].getBoundingClientRect().width +\n                        parseFloat($(v).css(\"margin-right\") || 0);\n\n                    if (\n                        currentRowWidth + labelOuterWidth > nodeWidth * 0.7 && !isRowAdded\n                    ) {\n                        numberOfRows++;\n                        isRowAdded = true;\n                    }\n\n                    if (currentRowWidth + labelOuterWidth < nodeWidth) {\n                        currentRowWidth += labelOuterWidth;\n                    } else {\n                        isRowAdded = false;\n                        currentRowWidth = labelOuterWidth;\n                    }\n                });\n\n            var paddingLeft =\n                parseFloat(this.label.container.data(\"padding-left\") || 0) +\n                (isRowAdded ? 0 : currentRowWidth);\n            var paddingTop =\n                numberOfRows * labelOuterHeight +\n                parseFloat(this.label.container.data(\"padding-top\") || 0);\n\n            this.container\n                .find(\".\" + this.options.selector.query)\n                .find(\"input, textarea, [contenteditable], .typeahead__hint\")\n                .css({\n                    paddingLeft: paddingLeft,\n                    paddingTop: paddingTop\n                });\n        },\n\n        showLayout: function () {\n            if (this.container.hasClass(\"result\") ||\n                (\n                    !this.result.length && !this.options.emptyTemplate && !this.options.backdropOnFocus\n                )\n            ) return;\n\n            _addHtmlListeners.call(this);\n\n            this.container.addClass(\n                [\n                    this.result.length ||\n                    (this.searchGroups.length &&\n                        this.options.emptyTemplate &&\n                        this.query.length)\n                        ? \"result \"\n                        : \"\",\n                    this.options.hint && this.searchGroups.length ? \"hint\" : \"\",\n                    this.options.backdrop || this.options.backdropOnFocus\n                        ? \"backdrop\"\n                        : \"\"\n                ].join(\" \")\n            );\n\n            this.helper.executeCallback.call(\n                this,\n                this.options.callback.onShowLayout,\n                [this.node, this.query]\n            );\n\n            function _addHtmlListeners() {\n                var scope = this;\n\n                // If Typeahead is blured by pressing the \"Tab\" Key, hide the results\n                $(\"html\")\n                    .off(\"keydown\" + this.namespace)\n                    .on(\"keydown\" + this.namespace, function (e) {\n                        if (!e.keyCode || e.keyCode !== 9) return;\n                        setTimeout(function () {\n                            if (\n                                !$(\":focus\")\n                                    .closest(scope.container)\n                                    .find(scope.node)[0]\n                            ) {\n                                scope.hideLayout();\n                            }\n                        }, 0);\n                    });\n\n                // If Typeahead is blured by clicking outside, hide the results\n                $(\"html\")\n                    .off(\"click\" + this.namespace + \" touchend\" + this.namespace)\n                    .on(\"click\" + this.namespace + \" touchend\" + this.namespace, function (e) {\n                        if ($(e.target).closest(scope.container)[0] ||\n                            $(e.target).closest('.' + scope.options.selector.item)[0] ||\n                            e.target.className === scope.options.selector.cancelButton ||\n                            scope.hasDragged\n                        ) return;\n\n                        scope.hideLayout();\n                    });\n            }\n        },\n\n        hideLayout: function () {\n            // Means the container is already hidden\n            if (!this.container.hasClass(\"result\") && !this.container.hasClass(\"backdrop\")) return;\n\n            this.container.removeClass(\n                \"result hint filter\" +\n                (this.options.backdropOnFocus && $(this.node).is(\":focus\")\n                    ? \"\"\n                    : \" backdrop\")\n            );\n\n            if (this.options.backdropOnFocus && this.container.hasClass(\"backdrop\"))\n                return;\n\n            // Make sure the event HTML gets cleared\n            $(\"html\").off(this.namespace);\n\n            this.helper.executeCallback.call(\n                this,\n                this.options.callback.onHideLayout,\n                [this.node, this.query]\n            );\n        },\n\n        resetLayout: function () {\n            this.result = [];\n            this.tmpResult = {};\n            this.groups = [];\n            this.resultCount = 0;\n            this.resultCountPerGroup = {};\n            this.resultItemCount = 0;\n            this.resultHtml = null;\n\n            if (this.options.hint && this.hint.container) {\n                this.hint.container.val(\"\");\n                if (this.isContentEditable) {\n                    this.hint.container.text(\"\");\n                }\n            }\n        },\n\n        resetInput: function () {\n            this.node.val(\"\");\n            if (this.isContentEditable) {\n                this.node.text(\"\");\n            }\n            this.item = null;\n            this.query = \"\";\n            this.rawQuery = \"\";\n        },\n\n        buildCancelButtonLayout: function () {\n            if (!this.options.cancelButton) return;\n            var scope = this;\n\n            $(\"<span/>\", {\n                class: this.options.selector.cancelButton,\n                html: \"×\",\n                mousedown: function (e) {\n                    // Don't blur the input\n                    e.stopImmediatePropagation();\n                    e.preventDefault();\n\n                    scope.resetInput();\n                    scope.node.trigger(\"input\" + scope.namespace, [e]);\n                }\n            }).insertBefore(this.node);\n        },\n\n        toggleCancelButtonVisibility: function () {\n            this.container.toggleClass(\"cancel\", !!this.query.length);\n        },\n\n        __construct: function () {\n            this.extendOptions();\n\n            if (!this.unifySourceFormat()) {\n                return;\n            }\n\n            this.dynamicFilter.init.apply(this);\n\n            this.init();\n            this.buildDropdownLayout();\n            this.buildDropdownItemLayout(\"static\");\n\n            this.buildMultiselectLayout();\n\n            this.delegateEvents();\n            this.buildCancelButtonLayout();\n\n            this.helper.executeCallback.call(this, this.options.callback.onReady, [\n                this.node\n            ]);\n        },\n\n        helper: {\n            isEmpty: function (obj) {\n                for (var prop in obj) {\n                    if (obj.hasOwnProperty(prop)) return false;\n                }\n\n                return true;\n            },\n\n            /**\n             * Remove every accent(s) from a string\n             *\n             * @param {String} string\n             * @returns {*}\n             */\n            removeAccent: function (string) {\n                if (typeof string !== \"string\") {\n                    return;\n                }\n\n                var accent = _accent;\n\n                if (typeof this.options.accent === \"object\") {\n                    accent = this.options.accent;\n                }\n\n                string = string\n                    .toLowerCase()\n                    .replace(new RegExp(\"[\" + accent.from + \"]\", \"g\"), function (match) {\n                        return accent.to[accent.from.indexOf(match)];\n                    });\n\n                return string;\n            },\n\n            /**\n             * Creates a valid url from string\n             *\n             * @param {String} string\n             * @returns {string}\n             */\n            slugify: function (string) {\n                string = String(string);\n\n                if (string !== \"\") {\n                    string = this.helper.removeAccent.call(this, string);\n                    string = string\n                        .replace(/[^-a-z0-9]+/g, \"-\")\n                        .replace(/-+/g, \"-\")\n                        .replace(/^-|-$/g, \"\");\n                }\n\n                return string;\n            },\n\n            /**\n             * Sort list of object by key\n             *\n             * @param {String|Array} field\n             * @param {Boolean} reverse\n             * @param {Function} primer\n             * @returns {Function}\n             */\n            sort: function (field, reverse, primer) {\n                var key = function (x) {\n                    for (var i = 0, ii = field.length; i < ii; i++) {\n                        if (typeof x[field[i]] !== \"undefined\") {\n                            return primer(x[field[i]]);\n                        }\n                    }\n                    return x;\n                };\n\n                reverse = [-1, 1][+!!reverse];\n\n                return function (a, b) {\n                    return (a = key(a)), (b = key(b)), reverse * ((a > b) - (b > a));\n                };\n            },\n\n            /**\n             * Replace a string from-to index\n             *\n             * @param {String} string The complete string to replace into\n             * @param {Number} offset The cursor position to start replacing from\n             * @param {Number} length The length of the replacing string\n             * @param {String} replace The replacing string\n             * @returns {String}\n             */\n            replaceAt: function (string, offset, length, replace) {\n                return (\n                    string.substring(0, offset) +\n                    replace +\n                    string.substring(offset + length)\n                );\n            },\n\n            /**\n             * Adds <strong> html around a matched string\n             *\n             * @param {String} string The complete string to match from\n             * @param {String} key\n             * @param {Boolean} [accents]\n             * @returns {*}\n             */\n            highlight: function (string, keys, accents) {\n                string = String(string);\n\n                var searchString =\n                    (accents && this.helper.removeAccent.call(this, string)) || string,\n                    matches = [];\n\n                if (!Array.isArray(keys)) {\n                    keys = [keys];\n                }\n\n                keys.sort(function (a, b) {\n                    return b.length - a.length;\n                });\n\n                // Make sure the '|' join will be safe!\n                for (var i = keys.length - 1; i >= 0; i--) {\n                    if (keys[i].trim() === \"\") {\n                        keys.splice(i, 1);\n                        continue;\n                    }\n                    keys[i] = keys[i].replace(/[-[\\]{}()*+?.,\\\\^$|#\\s]/g, \"\\\\$&\");\n                }\n\n                searchString.replace(\n                    new RegExp(\"(?:\" + keys.join(\"|\") + \")(?!([^<]+)?>)\", \"gi\"),\n                    function (match, index, offset) {\n                        matches.push({\n                            offset: offset,\n                            length: match.length\n                        });\n                    }\n                );\n\n                for (var i = matches.length - 1; i >= 0; i--) {\n                    string = this.helper.replaceAt(\n                        string,\n                        matches[i].offset,\n                        matches[i].length,\n                        \"<strong>\" +\n                        string.substr(matches[i].offset, matches[i].length) +\n                        \"</strong>\"\n                    );\n                }\n\n                return string;\n            },\n\n            /**\n             * Get caret position, used for right arrow navigation\n             * when hint option is enabled\n             * @param {Node} element\n             * @returns {Number} Caret position\n             */\n            getCaret: function (element) {\n                var caretPos = 0;\n\n                if (element.selectionStart) {\n                    // Input & Textarea\n                    return element.selectionStart;\n                } else if (document.selection) {\n                    var r = document.selection.createRange();\n                    if (r === null) {\n                        return caretPos;\n                    }\n\n                    var re = element.createTextRange(),\n                        rc = re.duplicate();\n                    re.moveToBookmark(r.getBookmark());\n                    rc.setEndPoint(\"EndToStart\", re);\n\n                    caretPos = rc.text.length;\n                } else if (window.getSelection) {\n                    // Contenteditable\n                    var sel = window.getSelection();\n                    if (sel.rangeCount) {\n                        var range = sel.getRangeAt(0);\n                        if (range.commonAncestorContainer.parentNode == element) {\n                            caretPos = range.endOffset;\n                        }\n                    }\n                }\n                return caretPos;\n            },\n\n            /**\n             * For [contenteditable] typeahead node only,\n             * when an item is clicked set the cursor at the end\n             * @param {Node} element\n             */\n            setCaretAtEnd: function (element) {\n                if (\n                    typeof window.getSelection !== \"undefined\" &&\n                    typeof document.createRange !== \"undefined\"\n                ) {\n                    var range = document.createRange();\n                    range.selectNodeContents(element);\n                    range.collapse(false);\n                    var sel = window.getSelection();\n                    sel.removeAllRanges();\n                    sel.addRange(range);\n                } else if (typeof document.body.createTextRange !== \"undefined\") {\n                    var textRange = document.body.createTextRange();\n                    textRange.moveToElementText(element);\n                    textRange.collapse(false);\n                    textRange.select();\n                }\n            },\n\n            /**\n             * Clean strings from possible XSS (script and iframe tags)\n             * @param string\n             * @returns {string}\n             */\n            cleanStringFromScript: function (string) {\n                return (\n                    (typeof string === \"string\" &&\n                        string.replace(/<\\/?(?:script|iframe)\\b[^>]*>/gm, \"\")) ||\n                    string\n                );\n            },\n\n            /**\n             * Executes an anonymous function or a string reached from the window scope.\n             *\n             * @example\n             * Note: These examples works with every configuration callbacks\n             *\n             * // An anonymous function inside the \"onInit\" option\n             * onInit: function() { console.log(':D'); };\n             *\n             * // myFunction() located on window.coucou scope\n             * onInit: 'window.coucou.myFunction'\n             *\n             * // myFunction(a,b) located on window.coucou scope passing 2 parameters\n             * onInit: ['window.coucou.myFunction', [':D', ':)']];\n             *\n             * // Anonymous function to execute a local function\n             * onInit: function () { myFunction(':D'); }\n             *\n             * @param {String|Array} callback The function to be called\n             * @param {Array} [extraParams] In some cases the function can be called with Extra parameters (onError)\n             * @returns {*}\n             */\n            executeCallback: function (callback, extraParams) {\n                if (!callback) {\n                    return;\n                }\n\n                var _callback;\n\n                if (typeof callback === \"function\") {\n                    _callback = callback;\n                } else if (typeof callback === \"string\" || Array.isArray(callback)) {\n                    if (typeof callback === \"string\") {\n                        callback = [callback, []];\n                    }\n\n                    _callback = this.helper.namespace.call(this, callback[0], window);\n\n                    if (typeof _callback !== \"function\") {\n                        // {debug}\n                        if (this.options.debug) {\n                            _debug.log({\n                                node: this.selector,\n                                function: \"executeCallback()\",\n                                arguments: JSON.stringify(callback),\n                                message: 'WARNING - Invalid callback function\"'\n                            });\n\n                            _debug.print();\n                        }\n                        // {/debug}\n                        return;\n                    }\n                }\n\n                return _callback.apply(\n                    this,\n                    (callback[1] || []).concat(extraParams ? extraParams : [])\n                );\n            },\n\n            namespace: function (string, object, method, defaultValue) {\n                if (typeof string !== \"string\" || string === \"\") {\n                    // {debug}\n                    if (this.options.debug) {\n                        _debug.log({\n                            node: this.options.input || this.selector,\n                            function: \"helper.namespace()\",\n                            arguments: string,\n                            message: 'ERROR - Missing string\"'\n                        });\n\n                        _debug.print();\n                    }\n                    // {/debug}\n                    return false;\n                }\n\n                var value = typeof defaultValue !== \"undefined\"\n                    ? defaultValue\n                    : undefined;\n\n                // Exit before looping if the string doesn't contain an object reference\n                if (!~string.indexOf(\".\")) {\n                    return object[string] || value;\n                }\n\n                var parts = string.split(\".\"),\n                    parent = object || window,\n                    method = method || \"get\",\n                    currentPart = \"\";\n\n                for (var i = 0, length = parts.length; i < length; i++) {\n                    currentPart = parts[i];\n\n                    if (typeof parent[currentPart] === \"undefined\") {\n                        if (~[\"get\", \"delete\"].indexOf(method)) {\n                            return typeof defaultValue !== \"undefined\"\n                                ? defaultValue\n                                : undefined;\n                        }\n                        parent[currentPart] = {};\n                    }\n\n                    if (~[\"set\", \"create\", \"delete\"].indexOf(method)) {\n                        if (i === length - 1) {\n                            if (method === \"set\" || method === \"create\") {\n                                parent[currentPart] = value;\n                            } else {\n                                delete parent[currentPart];\n                                return true;\n                            }\n                        }\n                    }\n\n                    parent = parent[currentPart];\n                }\n                return parent;\n            },\n\n            typeWatch: (function () {\n                var timer = 0;\n                return function (callback, ms) {\n                    clearTimeout(timer);\n                    timer = setTimeout(callback, ms);\n                };\n            })()\n        }\n    };\n\n    /**\n     * @public\n     * Implement Typeahead on the selected input node.\n     *\n     * @param {Object} options\n     * @return {Object} Modified DOM element\n     */\n    $.fn.typeahead = $.typeahead = function (options) {\n        return _api.typeahead(this, options);\n    };\n\n    /**\n     * @private\n     * API to handles Typeahead methods via jQuery.\n     */\n    var _api = {\n        /**\n         * Enable Typeahead\n         *\n         * @param {Object} node\n         * @param {Object} options\n         * @returns {*}\n         */\n        typeahead: function (node, options) {\n            if (!options || !options.source || typeof options.source !== \"object\") {\n                // {debug}\n                _debug.log({\n                    node: node.selector || (options && options.input),\n                    function: \"$.typeahead()\",\n                    arguments: JSON.stringify((options && options.source) || \"\"),\n                    message: 'Undefined \"options\" or \"options.source\" or invalid source type - Typeahead dropped'\n                });\n\n                _debug.print();\n                // {/debug}\n\n                return;\n            }\n\n            if (typeof node === \"function\") {\n                if (!options.input) {\n                    // {debug}\n                    _debug.log({\n                        node: node.selector,\n                        function: \"$.typeahead()\",\n                        //'arguments': JSON.stringify(options),\n                        message: 'Undefined \"options.input\" - Typeahead dropped'\n                    });\n\n                    _debug.print();\n                    // {/debug}\n\n                    return;\n                }\n\n                node = $(options.input);\n            }\n            if (typeof node[0].value === \"undefined\") {\n                node[0].value = node.text();\n            }\n            if (!node.length) {\n                // {debug}\n                _debug.log({\n                    node: node.selector,\n                    function: \"$.typeahead()\",\n                    arguments: JSON.stringify(options.input),\n                    message: \"Unable to find jQuery input element - Typeahead dropped\"\n                });\n\n                _debug.print();\n                // {/debug}\n\n                return;\n            }\n\n            // #270 Forcing node.selector, the property was deleted from jQuery3\n            // In case of multiple init, each of the instances needs it's own selector!\n            if (node.length === 1) {\n                node[0].selector =\n                    node.selector || options.input || node[0].nodeName.toLowerCase();\n\n                /*jshint boss:true */\n                return (window.Typeahead[node[0].selector] = new Typeahead(node, options));\n            } else {\n                var instances = {},\n                    instanceName;\n\n                for (var i = 0, ii = node.length; i < ii; ++i) {\n                    instanceName = node[i].nodeName.toLowerCase();\n                    if (typeof instances[instanceName] !== \"undefined\") {\n                        instanceName += i;\n                    }\n                    node[i].selector = instanceName;\n\n                    window.Typeahead[instanceName] = instances[instanceName] = new Typeahead(node.eq(i), options);\n                }\n\n                return instances;\n            }\n        }\n    };\n\n    // {debug}\n    var _debug = {\n        table: {},\n        log: function (debugObject) {\n            if (!debugObject.message || typeof debugObject.message !== \"string\") {\n                return;\n            }\n\n            this.table[debugObject.message] = $.extend(\n                {\n                    node: \"\",\n                    function: \"\",\n                    arguments: \"\"\n                },\n                debugObject\n            );\n        },\n        print: function () {\n            if (\n                Typeahead.prototype.helper.isEmpty(this.table) || !console || !console.table\n            ) {\n                return;\n            }\n\n            if (console.group !== undefined || console.table !== undefined) {\n                // console.groupCollapsed(\"--- jQuery Typeahead Debug ---\");\n                // console.table(this.table);\n                // console.groupEnd();\n            }\n\n            this.table = {};\n        }\n    };\n    _debug.log({\n        message: \"WARNING - You are using the DEBUG version. Use /dist/jquery.typeahead.min.js in production.\"\n    });\n\n    _debug.print();\n    // {/debug}\n\n    // IE8 Shims\n    window.console = window.console || {\n        log: function () {\n        }\n    };\n\n    if (!Array.isArray) {\n        Array.isArray = function (arg) {\n            return Object.prototype.toString.call(arg) === \"[object Array]\";\n        };\n    }\n\n    if (!(\"trim\" in String.prototype)) {\n        String.prototype.trim = function () {\n            return this.replace(/^\\s+/, \"\").replace(/\\s+$/, \"\");\n        };\n    }\n    if (!(\"indexOf\" in Array.prototype)) {\n        Array.prototype.indexOf = function (find, i /*opt*/) {\n            if (i === undefined) i = 0;\n            if (i < 0) i += this.length;\n            if (i < 0) i = 0;\n            for (var n = this.length; i < n; i++)\n                if (i in this && this[i] === find) return i;\n            return -1;\n        };\n    }\n    if (!Object.keys) {\n        Object.keys = function (obj) {\n            var keys = [],\n                k;\n            for (k in obj) {\n                if (Object.prototype.hasOwnProperty.call(obj, k)) {\n                    keys.push(k);\n                }\n            }\n            return keys;\n        };\n    }\n\n    return Typeahead;\n});\n\n// END JS TYPEHEAD"]}